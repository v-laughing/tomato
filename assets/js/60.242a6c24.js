(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{1091:function(t,a,e){"use strict";e.r(a);var s=e(7),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"第5章-语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第5章-语句"}},[t._v("#")]),t._v(" 第5章 语句")]),t._v(" "),s("h2",{attrs:{id:"简单语句-simple-statements"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简单语句-simple-statements"}},[t._v("#")]),t._v(" 简单语句（Simple Statements）")]),t._v(" "),s("p",[s("strong",[t._v("空语句（null statement）")]),t._v("：只含有一个单独的分号"),s("code",[t._v(";")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cin "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" sought"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// null statement")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("使用空语句时应该加上注释，从而令读这段代码的人知道该语句是有意省略的。")])]),t._v(" "),s("p",[s("strong",[t._v("复合语句（compound statement）")]),t._v("：用花括号括起来的语句序列，也叫做块（block）。一个块就是一个作用域。")]),t._v(" "),s("p",[t._v("语句块不以分号作为结束。空块的作用等价于空语句。")]),t._v(" "),s("h2",{attrs:{id:"语句作用域-statement-scope"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#语句作用域-statement-scope"}},[t._v("#")]),t._v(" 语句作用域（Statement Scope）")]),t._v(" "),s("p",[t._v("可以在"),s("code",[t._v("if")]),t._v("、"),s("code",[t._v("switch")]),t._v("、"),s("code",[t._v("while")]),t._v("和"),s("code",[t._v("for")]),t._v("语句的控制结构内定义变量，这些变量只在相应语句的内部可见，一旦语句结束，变量也就超出了其作用范围。")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_num")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// i is created and initialized on each iteration")]),t._v("\n    cout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ni "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// error: i is not accessible outside the loop")]),t._v("\n")])])]),s("h2",{attrs:{id:"条件语句-conditional-statements"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#条件语句-conditional-statements"}},[t._v("#")]),t._v(" 条件语句（Conditional Statements）")]),t._v(" "),s("h3",{attrs:{id:"if语句-the-if-statement"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#if语句-the-if-statement"}},[t._v("#")]),t._v(" if语句（The if Statement）")]),t._v(" "),s("p",[s("code",[t._v("if")]),t._v("语句的形式：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("condition"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    statement\n")])])]),s("p",[s("code",[t._v("if-else")]),t._v("语句的形式：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("condition"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    statement\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n    statement2\n")])])]),s("p",[s("code",[t._v("if")]),t._v("语句可以嵌套，其中"),s("code",[t._v("else")]),t._v("与离它最近的尚未匹配的"),s("code",[t._v("if")]),t._v("相匹配。")]),t._v(" "),s("h3",{attrs:{id:"switch语句-the-switch-statement"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#switch语句-the-switch-statement"}},[t._v("#")]),t._v(" switch语句（The switch Statement）")]),t._v(" "),s("p",[s("code",[t._v("switch")]),t._v("语句的形式：")]),t._v(" "),s("p",[s("img",{attrs:{src:e(730),alt:"5-1"}})]),t._v(" "),s("p",[s("code",[t._v("switch")]),t._v("语句先对括号里的表达式求值，值转换成整数类型后再与每个"),s("code",[t._v("case")]),t._v("标签（case label）的值进行比较。如果表达式的值和某个"),s("code",[t._v("case")]),t._v("标签匹配，程序从该标签之后的第一条语句开始执行，直到到达"),s("code",[t._v("switch")]),t._v("的结尾或者遇到"),s("code",[t._v("break")]),t._v("语句为止。"),s("code",[t._v("case")]),t._v("标签"),s("mark",[t._v("必须是整型常量表达式")]),t._v("。")]),t._v(" "),s("p",[t._v("通常情况下每个"),s("code",[t._v("case")]),t._v("分支后都有"),s("code",[t._v("break")]),t._v("语句。如果确实不应该出现"),s("code",[t._v("break")]),t._v("语句，最好写一段注释说明程序的逻辑。")]),t._v(" "),s("p",[t._v("尽管"),s("code",[t._v("switch")]),t._v("语句没有强制要求在最后一个"),s("code",[t._v("case")]),t._v("标签后写上"),s("code",[t._v("break")]),t._v("，但为了安全起见，最好添加"),s("code",[t._v("break")]),t._v("。这样即使以后增加了新的"),s("code",[t._v("case")]),t._v("分支，也不用再在前面补充"),s("code",[t._v("break")]),t._v("语句了。")]),t._v(" "),s("p",[s("code",[t._v("switch")]),t._v("语句中可以添加一个"),s("code",[t._v("default")]),t._v("标签（default label），如果没有任何一个"),s("code",[t._v("case")]),t._v("标签能匹配上"),s("code",[t._v("switch")]),t._v("表达式的值，程序将执行"),s("code",[t._v("default")]),t._v("标签后的语句。")]),t._v(" "),s("p",[t._v("即使不准备在"),s("code",[t._v("default")]),t._v("标签下做任何操作，程序中也应该定义一个"),s("code",[t._v("default")]),t._v("标签。其目的在于告诉他人我们已经考虑到了默认情况，只是目前不需要实际操作。")]),t._v(" "),s("p",[t._v("不允许跨过变量的初始化语句直接跳转到该变量作用域内的另一个位置。如果需要为"),s("code",[t._v("switch")]),t._v("的某个"),s("code",[t._v("case")]),t._v("分支定义并初始化一个变量，则应该把变量定义在块内。")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ok: declaration statement within a statement block")]),t._v("\n    string file_name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_file_name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"迭代语句-iterative-statements"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#迭代语句-iterative-statements"}},[t._v("#")]),t._v(" 迭代语句（Iterative Statements）")]),t._v(" "),s("p",[t._v("迭代语句通常称为循环，它重复执行操作直到满足某个条件才停止。"),s("code",[t._v("while")]),t._v("和"),s("code",[t._v("for")]),t._v("语句在执行循环体之前检查条件，"),s("code",[t._v("do-while")]),t._v("语句先执行循环体再检查条件。")]),t._v(" "),s("h3",{attrs:{id:"while语句-the-while-statement"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#while语句-the-while-statement"}},[t._v("#")]),t._v(" while语句（The while Statement）")]),t._v(" "),s("p",[s("code",[t._v("while")]),t._v("语句的形式：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("condition"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    statement\n")])])]),s("h3",{attrs:{id:"传统的for语句-traditional-for-statement"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#传统的for语句-traditional-for-statement"}},[t._v("#")]),t._v(" 传统的for语句（Traditional for Statement）")]),t._v(" "),s("p",[s("code",[t._v("for")]),t._v("语句的形式：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("initializer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" condition"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" expression"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    statement\n")])])]),s("p",[s("code",[t._v("for")]),t._v("语句头中定义的对象只在"),s("code",[t._v("for")]),t._v("循环体内可见。")]),t._v(" "),s("h3",{attrs:{id:"范围for语句-range-for-statement"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#范围for语句-range-for-statement"}},[t._v("#")]),t._v(" 范围for语句（Range for Statement）")]),t._v(" "),s("p",[t._v("范围"),s("code",[t._v("for")]),t._v("语句的形式：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("declaration "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" expression"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    statement\n")])])]),s("p",[t._v("其中"),s("em",[t._v("expression")]),t._v("表示一个序列，拥有能返回迭代器的"),s("code",[t._v("begin")]),t._v("和"),s("code",[t._v("end")]),t._v("成员。\n"),s("em",[t._v("declaration")]),t._v("定义一个变量，序列中的每个元素都应该能转换成该变量的类型（可以使用"),s("code",[t._v("auto")]),t._v("）。")]),t._v(" "),s("h3",{attrs:{id:"do-while语句-the-do-while-statement"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#do-while语句-the-do-while-statement"}},[t._v("#")]),t._v(" do-while语句（The do-while Statement）")]),t._v(" "),s("p",[s("code",[t._v("do-while")]),t._v("语句的形式：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n    statement\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("condition"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("计算"),s("em",[t._v("condition")]),t._v("的值之前会先执行一次"),s("em",[t._v("statement")]),t._v("，"),s("em",[t._v("condition")]),t._v("不能为空。如果"),s("em",[t._v("condition")]),t._v("的值为"),s("code",[t._v("false")]),t._v("，循环终止，否则重复执行"),s("em",[t._v("statement")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"跳转语句-jump-statements"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#跳转语句-jump-statements"}},[t._v("#")]),t._v(" 跳转语句（Jump Statements）")]),t._v(" "),s("p",[t._v("跳转语句中断当前的执行过程。")]),t._v(" "),s("h3",{attrs:{id:"break语句-the-break-statement"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#break语句-the-break-statement"}},[t._v("#")]),t._v(" break语句（The break Statement）")]),t._v(" "),s("p",[s("code",[t._v("break")]),t._v("语句只能出现在迭代语句或者"),s("code",[t._v("switch")]),t._v("语句的内部，负责终止离它最近的"),s("code",[t._v("while")]),t._v("、"),s("code",[t._v("do-while")]),t._v("、"),s("code",[t._v("for")]),t._v("或者"),s("code",[t._v("switch")]),t._v("语句，并从这些语句之后的第一条语句开始执行。")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("string buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cin "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" buf "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("empty")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'-'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// process up to the first blank")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" it "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("begin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" it "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("it"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("it "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("' '")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// #1, leaves the for loop")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// . . .")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// break #1 transfers control here")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// remaining '-' processing:")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// #2, leaves the switch statement")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'+'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// . . .")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// end switch")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// end of switch: break #2 transfers control here")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// end while")]),t._v("\n")])])]),s("h3",{attrs:{id:"continue语句-the-continue-statement"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#continue语句-the-continue-statement"}},[t._v("#")]),t._v(" continue语句（The continue Statement）")]),t._v(" "),s("p",[s("code",[t._v("continue")]),t._v("语句只能出现在迭代语句的内部，负责终止离它最近的循环的当前一次迭代并立即开始下一次迭代。和"),s("code",[t._v("break")]),t._v("语句不同的是，只有当"),s("code",[t._v("switch")]),t._v("语句嵌套在迭代语句内部时，才能在"),s("code",[t._v("switch")]),t._v("中使用"),s("code",[t._v("continue")]),t._v("。")]),t._v(" "),s("p",[s("code",[t._v("continue")]),t._v("语句中断当前迭代后，具体操作视迭代语句类型而定：")]),t._v(" "),s("ul",[s("li",[t._v("对于"),s("code",[t._v("while")]),t._v("和"),s("code",[t._v("do-while")]),t._v("语句来说，继续判断条件的值。")]),t._v(" "),s("li",[t._v("对于传统的"),s("code",[t._v("for")]),t._v("语句来说，继续执行"),s("code",[t._v("for")]),t._v("语句头中的第三部分，之后判断条件的值。")]),t._v(" "),s("li",[t._v("对于范围"),s("code",[t._v("for")]),t._v("语句来说，是用序列中的下一个元素初始化循环变量。")])]),t._v(" "),s("h3",{attrs:{id:"goto语句-the-goto-statement"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#goto语句-the-goto-statement"}},[t._v("#")]),t._v(" goto语句（The goto Statement）")]),t._v(" "),s("p",[s("code",[t._v("goto")]),t._v("语句（labeled statement）是一种特殊的语句，在它之前有一个标识符和一个冒号。")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("end"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// labeled statement; may be the target of a goto")]),t._v("\n")])])]),s("p",[t._v("标签标识符独立于变量和其他标识符的名字，它们之间不会相互干扰。")]),t._v(" "),s("p",[s("code",[t._v("goto")]),t._v("语句的形式：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("goto")]),t._v(" label"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("code",[t._v("goto")]),t._v("语句使程序无条件跳转到标签为"),s("em",[t._v("label")]),t._v("的语句处执行，但两者必须位于同一个函数内，同时"),s("code",[t._v("goto")]),t._v("语句也不能将程序的控制权从变量的作用域之外转移到作用域之内。")]),t._v(" "),s("blockquote",[s("p",[t._v("建议不要在程序中使用"),s("code",[t._v("goto")]),t._v("语句，它使得程序既难理解又难修改。")])]),t._v(" "),s("h2",{attrs:{id:"try语句块和异常处理-try-blocks-and-exception-handling"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#try语句块和异常处理-try-blocks-and-exception-handling"}},[t._v("#")]),t._v(" try语句块和异常处理（try Blocks and Exception Handling）")]),t._v(" "),s("p",[t._v("异常（exception）是指程序运行时的反常行为，这些行为超出了函数正常功能的范围。当程序的某一部分检测到一个它无法处理的问题时，需要使用异常处理（exception handling）。")]),t._v(" "),s("p",[t._v("异常处理机制包括"),s("code",[t._v("throw")]),t._v("表达式（throw expression）、"),s("code",[t._v("try")]),t._v("语句块（try block）和异常类（exception class）。")]),t._v(" "),s("ul",[s("li",[t._v("异常检测部分使用"),s("code",[t._v("throw")]),t._v("表达式表示它遇到了无法处理的问题（"),s("code",[t._v("throw")]),t._v("引发了异常）。")]),t._v(" "),s("li",[t._v("异常处理部分使用"),s("code",[t._v("try")]),t._v("语句块处理异常。"),s("code",[t._v("try")]),t._v("语句块以关键字"),s("code",[t._v("try")]),t._v("开始，并以一个或多个"),s("code",[t._v("catch")]),t._v("子句（catch clause）结束。"),s("code",[t._v("try")]),t._v("语句块中代码抛出的异常通常会被某个"),s("code",[t._v("catch")]),t._v("子句处理，"),s("code",[t._v("catch")]),t._v("子句也被称作异常处理代码（exception handler）。")]),t._v(" "),s("li",[t._v("异常类用于在"),s("code",[t._v("throw")]),t._v("表达式和相关的"),s("code",[t._v("catch")]),t._v("子句之间传递异常的具体信息。")])]),t._v(" "),s("h3",{attrs:{id:"throw表达式-a-throw-expression"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#throw表达式-a-throw-expression"}},[t._v("#")]),t._v(" throw表达式（A throw Expression）")]),t._v(" "),s("p",[s("code",[t._v("throw")]),t._v("表达式包含关键字"),s("code",[t._v("throw")]),t._v("和紧随其后的一个表达式，其中表达式的类型就是抛出的异常类型。")]),t._v(" "),s("h3",{attrs:{id:"try语句块-the-try-block"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#try语句块-the-try-block"}},[t._v("#")]),t._v(" try语句块（The try Block）")]),t._v(" "),s("p",[s("code",[t._v("try")]),t._v("语句块的通用形式：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    program"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("statements\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exception"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("declaration"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    handler"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("statements\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exception"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("declaration"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    handler"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("statements\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// . . .")]),t._v("\n")])])]),s("p",[s("code",[t._v("try")]),t._v("语句块中的"),s("em",[t._v("program-statements")]),t._v("组成程序的正常逻辑，其内部声明的变量在块外无法访问，即使在"),s("code",[t._v("catch")]),t._v("子句中也不行。"),s("code",[t._v("catch")]),t._v("子句包含关键字"),s("code",[t._v("catch")]),t._v("、括号内一个对象的声明（异常声明，exception declaration）和一个块。当选中了某个"),s("code",[t._v("catch")]),t._v("子句处理异常后，执行与之对应的块。"),s("code",[t._v("catch")]),t._v("一旦完成，程序会跳过剩余的所有"),s("code",[t._v("catch")]),t._v("子句，继续执行后面的语句。")]),t._v(" "),s("p",[t._v("如果最终没能找到与异常相匹配的"),s("code",[t._v("catch")]),t._v("子句，程序会执行名为"),s("code",[t._v("terminate")]),t._v("的标准库函数。该函数的行为与系统有关，一般情况下，执行该函数将导致程序非正常退出。类似的，如果一段程序没有"),s("code",[t._v("try")]),t._v("语句块且发生了异常，系统也会调用"),s("code",[t._v("terminate")]),t._v("函数并终止当前程序的执行。")]),t._v(" "),s("h3",{attrs:{id:"标准异常-standard-exceptions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标准异常-standard-exceptions"}},[t._v("#")]),t._v(" 标准异常（Standard Exceptions）")]),t._v(" "),s("p",[t._v("异常类分别定义在4个头文件中：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("头文件"),s("em",[t._v("exception")]),t._v("定义了最通用的异常类"),s("code",[t._v("exception")]),t._v("。它只报告异常的发生，不提供任何额外信息。")])]),t._v(" "),s("li",[s("p",[t._v("头文件"),s("em",[t._v("stdexcept")]),t._v("定义了几种常用的异常类。")]),t._v(" "),s("p",[s("img",{attrs:{src:e(731),alt:"5-2"}})])]),t._v(" "),s("li",[s("p",[t._v("头文件"),s("em",[t._v("new")]),t._v("定义了"),s("code",[t._v("bad_alloc")]),t._v("异常类。")])]),t._v(" "),s("li",[s("p",[t._v("头文件"),s("em",[t._v("type_info")]),t._v("定义了"),s("code",[t._v("bad_cast")]),t._v("异常类。")])])]),t._v(" "),s("p",[t._v("标准库异常类的继承体系：")]),t._v(" "),s("p",[s("img",{attrs:{src:e(732),alt:"5-3"}})]),t._v(" "),s("p",[t._v("只能以默认初始化的方式初始化"),s("code",[t._v("exception")]),t._v("、"),s("code",[t._v("bad_alloc")]),t._v("和"),s("code",[t._v("bad_cast")]),t._v("对象，不允许为这些对象提供初始值。其他异常类的对象在初始化时必须提供一个"),s("code",[t._v("string")]),t._v("或一个C风格字符串，通常表示异常信息。"),s("code",[t._v("what")]),t._v("成员函数可以返回该字符串的"),s("code",[t._v("string")]),t._v("副本。")])])}),[],!1,null,null,null);a.default=n.exports},730:function(t,a,e){t.exports=e.p+"assets/img/5-1.b7b02277.png"},731:function(t,a){t.exports="data:image/png;base64,"},732:function(t,a){t.exports="data:image/png;base64,"}}]);