(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{1093:function(t,s,a){"use strict";a.r(s);var e=a(7),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"第2章-变量和基本类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第2章-变量和基本类型"}},[t._v("#")]),t._v(" 第2章 变量和基本类型")]),t._v(" "),e("h2",{attrs:{id:"基本内置类型-primitive-built-in-types"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本内置类型-primitive-built-in-types"}},[t._v("#")]),t._v(" 基本内置类型（Primitive Built-in Types）")]),t._v(" "),e("h3",{attrs:{id:"算数类型-arithmetic-types"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#算数类型-arithmetic-types"}},[t._v("#")]),t._v(" 算数类型（Arithmetic Types）")]),t._v(" "),e("p",[t._v("算数类型分为两类：整型、浮点型。")]),t._v(" "),e("p",[e("img",{attrs:{src:a(743),alt:"avatar"}}),e("br")]),t._v(" "),e("p",[e("code",[t._v("bool")]),t._v("：取值是"),e("code",[t._v("true")]),t._v("或"),e("code",[t._v("false")]),t._v("。\n"),e("code",[t._v("char")]),t._v("：可以表示基本字符集。\n"),e("code",[t._v("wchar_t")]),t._v("：可以表示机器的最大扩展字符集。")]),t._v(" "),e("p",[t._v("在整型类型大小方面，C++规定"),e("code",[t._v("short")]),t._v(" ≤ "),e("code",[t._v("int")]),t._v(" ≤ "),e("code",[t._v("long")]),t._v(" ≤ "),e("code",[t._v("long long")]),t._v("(c++11)。")]),t._v(" "),e("p",[t._v("除去布尔型和扩展字符型，"),e("mark",[t._v("其他整型")]),t._v("可以分为带符号（signed）和无符号（unsigned）两种。")]),t._v(" "),e("p",[t._v("字符型分为"),e("code",[t._v("char")]),t._v("、"),e("code",[t._v("signed char")]),t._v("和"),e("code",[t._v("unsigned char")]),t._v("三种，但是表现形式只有带符号和无符号两种。类型"),e("code",[t._v("char")]),t._v("和"),e("code",[t._v("signed char")]),t._v("并不一样， "),e("code",[t._v("char")]),t._v("的具体形式由编译器（compiler）决定。")]),t._v(" "),e("p",[t._v("如何选择算数类型：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("当明确知晓数值不可能为负时，应该使用无符号类型。")])]),t._v(" "),e("li",[e("p",[t._v("使用"),e("code",[t._v("int")]),t._v("执行整数运算，如果数值超过了"),e("code",[t._v("int")]),t._v("的表示范围，应该使用"),e("code",[t._v("long long")]),t._v("类型。")])]),t._v(" "),e("li",[e("p",[t._v("在算数表达式中不要使用"),e("code",[t._v("char")]),t._v("和"),e("code",[t._v("bool")]),t._v("类型。如果需要使用一个不大的整数，应该明确指定它的类型是"),e("code",[t._v("signed char")]),t._v("还是"),e("code",[t._v("unsigned char")]),t._v("。")])]),t._v(" "),e("li",[e("p",[t._v("执行浮点数运算时建议使用"),e("code",[t._v("double")]),t._v("类型。")])])]),t._v(" "),e("h3",{attrs:{id:"类型转换-type-conversions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类型转换-type-conversions"}},[t._v("#")]),t._v(" 类型转换（Type Conversions）")]),t._v(" "),e("ul",[e("li",[t._v("非布尔类转换，初始值为0则结果为"),e("code",[t._v("false")]),t._v("，否则结果为"),e("code",[t._v("true")]),t._v("。")]),t._v(" "),e("li",[t._v("把整数值赋给浮点类型时，小数部分记为0。如果该整数所占的空间超过了浮点类型的容量，精度可能有损失。")]),t._v(" "),e("li",[t._v("赋给带符号类型一个超出它表示范围的值时，结果是未定义的（undefined）。")])]),t._v(" "),e("blockquote",[e("p",[t._v("注意，无符号数不会小于0，别用在循环中。")])]),t._v(" "),e("p",[e("mark",[t._v("不要混用带符号类型和无符号类型。")])]),t._v(" "),e("h3",{attrs:{id:"字面值常量-literals"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字面值常量-literals"}},[t._v("#")]),t._v(" 字面值常量（Literals）")]),t._v(" "),e("h4",{attrs:{id:"数字"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数字"}},[t._v("#")]),t._v(" 数字")]),t._v(" "),e("ul",[e("li",[t._v("八进制："),e("code",[t._v("0")]),t._v("开头")]),t._v(" "),e("li",[t._v("十六进制："),e("code",[t._v("0x")]),t._v("或"),e("code",[t._v("0X")]),t._v("开头")]),t._v(" "),e("li",[t._v("二进制："),e("code",[t._v("0b")]),t._v("或"),e("code",[t._v("0B")]),t._v("开头（C++14）")])]),t._v(" "),e("p",[t._v("C++14引入数字分隔符"),e("code",[t._v("'")]),t._v("，可以使数值读写更容易。")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 按照书写形式，每3位分为一组")]),t._v("\nstd"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("cout "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0B1'101")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 输出"13"')]),t._v("\nstd"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("cout "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1'100'000")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 输出"1100000"')]),t._v("\n")])])]),e("p",[t._v("浮点型字面值默认是一个"),e("code",[t._v("double")]),t._v("。")]),t._v(" "),e("p",[t._v("添加"),e("mark",[t._v("特定的前缀和后缀")]),t._v("，可以改变整型、浮点型和字符型字面值的默认类型。")]),t._v(" "),e("p",[e("img",{attrs:{src:a(744),alt:"avatar"}}),e("br")]),t._v(" "),e("blockquote",[e("p",[t._v("使用一个长整型字面值时，最好使用大写字母"),e("code",[t._v("L")]),t._v("进行标记，小写字母"),e("code",[t._v("l")]),t._v("和数字"),e("code",[t._v("1")]),t._v("容易混淆。")])]),t._v(" "),e("h4",{attrs:{id:"字符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字符"}},[t._v("#")]),t._v(" 字符")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("char")]),t._v("型字面值（常量字符）：单引号括起来的一个字符。")]),t._v(" "),e("li",[t._v("字符串字面值：双引号括起来的零个或多个字符。")])]),t._v(" "),e("blockquote",[e("p",[t._v("字符串字面值的类型是由常量字符构成的数组。编译器会在字符串的结尾处添加一个空字符"),e("code",[t._v("'\\0'")]),t._v("。")])]),t._v(" "),e("h2",{attrs:{id:"变量-variables"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#变量-variables"}},[t._v("#")]),t._v(" 变量（Variables）")]),t._v(" "),e("p",[t._v("变量即某个地址的名字。")]),t._v(" "),e("h3",{attrs:{id:"变量定义-variable-definitions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#变量定义-variable-definitions"}},[t._v("#")]),t._v(" 变量定义（Variable Definitions）")]),t._v(" "),e("p",[t._v("初始化：创建变量时赋予其一个初始值。\n赋值：把对象的当前值擦除，再用一个新值来替代。")]),t._v(" "),e("p",[e("strong",[t._v("列表初始化（list initialization）")]),t._v("：用花括号初始化变量。")]),t._v(" "),e("blockquote",[e("p",[t._v("当用于内置类型的变量时，如果初始值存在丢失信息的风险，则编译器会报错。")])]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" ld "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.1415926536")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("ld"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("ld"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// error: narrowing conversion required")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("c")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ld"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" d "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ld"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ok: but value will be truncated")]),t._v("\n")])])]),e("p",[t._v("如果定义变量时未指定初值，则变量被默认初始化，且对于内置类型，有：")]),t._v(" "),e("ul",[e("li",[t._v("定义于函数体之外的变量：被初始化为0。")]),t._v(" "),e("li",[t._v("函数体内部的变量：不被初始化，值是未定义的。会导致编程错误。")])]),t._v(" "),e("p",[e("mark",[t._v("建议初始化每一个内置类型的变量。")])]),t._v(" "),e("h3",{attrs:{id:"声明与定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#声明与定义"}},[t._v("#")]),t._v(" 声明与定义")]),t._v(" "),e("ul",[e("li",[t._v("声明：使得名字为程序所知（不分配空间）。")]),t._v(" "),e("li",[t._v("定义：创建与名字相关联的实体（分配内存空间）。")])]),t._v(" "),e("blockquote",[e("p",[t._v("如果想声明一个变量而不定义它，就在变量名前添加关键字"),e("code",[t._v("extern")]),t._v("，并且不要显式地初始化变量。")])]),t._v(" "),e("blockquote",[e("p",[e("strong",[t._v("一次定义，多次声明。")]),t._v("\n为了达到代码复用，一个变量应该可以被多个文件使用。变量在一个地方（"),e("strong",[t._v("源文件")]),t._v("）被定义，使用该变量的文件需有该变量的声明。再次复用，将声明放在一个文件中，称为"),e("strong",[t._v("头文件")]),t._v("，使用该变量的文件引入该文件即可。")])]),t._v(" "),e("h3",{attrs:{id:"标识符-identifiers"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#标识符-identifiers"}},[t._v("#")]),t._v(" 标识符（Identifiers）")]),t._v(" "),e("p",[t._v("C++的标识符由字母、数字和下划线组成。必须以字母或下划线开头。")]),t._v(" "),e("p",[t._v("限制：")]),t._v(" "),e("ul",[e("li",[t._v("不能是关键词。")]),t._v(" "),e("li",[t._v("不能连续出现两个下划线。")]),t._v(" "),e("li",[t._v("不能以下划线紧连大写字母开头。")]),t._v(" "),e("li",[t._v("函数体外的标识符不能以下划线开头。")])]),t._v(" "),e("h3",{attrs:{id:"名字的作用域-scope-of-a-name"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#名字的作用域-scope-of-a-name"}},[t._v("#")]),t._v(" 名字的作用域（Scope of a Name）")]),t._v(" "),e("p",[e("strong",[t._v("全局作用域")]),t._v("：定义在函数体之外的名字，整个程序范围内都可见。")]),t._v(" "),e("p",[e("strong",[t._v("内层作用域")]),t._v("可"),e("mark",[t._v("使用或覆盖")]),t._v("外层作用域定义的名字。")]),t._v(" "),e("blockquote",[e("p",[t._v("最好在第一次使用变量时再去定义它。")])]),t._v(" "),e("p",[t._v("作用域操作符"),e("code",[t._v("::")]),t._v("可覆盖默认的作用域规则。因为全局作用域本身并没有名字，所以当变量被"),e("code",[t._v("::")]),t._v("修饰时，其为全局作用域的变量。")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("<iostream>")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" reused "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// reused has global scope")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" unique "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// unique has block scope")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" reused "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// new, local object named reused hides global reused")]),t._v("\n    std"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("cout "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("reused "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" unique "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" std"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("endl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 42 0")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h2",{attrs:{id:"复合类型-compound-type"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#复合类型-compound-type"}},[t._v("#")]),t._v(" 复合类型（Compound Type）")]),t._v(" "),e("h3",{attrs:{id:"引用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#引用"}},[t._v("#")]),t._v(" 引用")]),t._v(" "),e("p",[t._v("变量的别名，地址的另一个名字。通过将声明符写成"),e("code",[t._v("&d")]),t._v("的形式来定义引用类型。")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" ival "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("refVal "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ival"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// refVal refers to (is another name for) ival")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("refVal2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// error: a reference must be initialized")]),t._v("\n")])])]),e("p",[t._v("定义引用时，"),e("mark",[t._v("必须指定要绑定的变量")]),t._v("（该变量有名字），即初始化。且不可再度绑定另一变量。")]),t._v(" "),e("p",[e("mark",[t._v("引用不是对象")]),t._v("，类型一般要和绑定的对象严格匹配。")]),t._v(" "),e("h3",{attrs:{id:"指针-pointer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#指针-pointer"}},[t._v("#")]),t._v(" 指针（Pointer）")]),t._v(" "),e("p",[t._v("一个对象，存放另一个对象的地址。无法指向引用。\n指针的类型表示它所指的对象的类型。")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ip1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ip2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     \n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" dp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("dp2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("获取对象的地址，可以使用取地址符"),e("code",[t._v("&")]),t._v("。")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" ival "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("ival"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("指针的值（即地址）应属于下列状态之一：")]),t._v(" "),e("ul",[e("li",[t._v("指向一个对象。")]),t._v(" "),e("li",[t._v("指向紧邻对象所占空间的下一个位置。")]),t._v(" "),e("li",[t._v("空指针，即指针没有指向任何对象。")]),t._v(" "),e("li",[t._v("无效指针，即上述情况之外的其他值。")])]),t._v(" "),e("p",[t._v("试图拷贝或以其他方式访问无效指针的值都会引发错误。")]),t._v(" "),e("p",[t._v("如果指针指向一个对象，可以使用解引用（dereference）符"),e("code",[t._v("*")]),t._v("来访问该对象。")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" ival "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("ival"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \ncout "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 42")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ival is 4 ")]),t._v("\n")])])]),e("p",[e("strong",[t._v("空指针（null pointer）")]),t._v(" 不指向任何对象，在试图使用一个指针前代码可以先检查它是否为空。得到空指针最直接的办法是用字面值"),e("code",[t._v("nullptr")]),t._v("来初始化指针。")]),t._v(" "),e("p",[t._v("旧版本程序通常使用"),e("code",[t._v("NULL")]),t._v("给指针赋值。")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("nullptr")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// equivalent to int *p1 = 0;")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p2 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// directly initializes p2 from the literal constant 0")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// must #include cstdlib")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p3 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// equivalent to int *p3 = 0;")]),t._v("\n")])])]),e("blockquote",[e("p",[t._v("建议初始化所有指针")])]),t._v(" "),e("p",[e("code",[t._v("void*")]),t._v("是一种特殊的指针类型，可以存放任意对象的地址，但"),e("mark",[t._v("不能直接操作")]),e("code",[t._v("void*")]),t._v("指针所指的对象。")]),t._v(" "),e("h3",{attrs:{id:"复合类型的声明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#复合类型的声明"}},[t._v("#")]),t._v(" 复合类型的声明")]),t._v(" "),e("p",[t._v("指向指针的指针（Pointers to Pointers）：")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" ival "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pi "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("ival"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// pi points to an int")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ppi "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("pi"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ppi points to a pointer to an int")]),t._v("\n")])])]),e("p",[e("img",{attrs:{src:a(745),alt:"avatar"}}),e("br")]),t._v(" "),e("p",[t._v("指向指针的引用（References to Pointers）：")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("         "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// p is a pointer to int")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("r "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// r is a reference to the pointer p")]),t._v("\nr "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("         "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// r refers to a pointer; assigning &i to r makes p point to i")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("r "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("         "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// dereferencing r yields i, the object to which p points; changes i to 0")]),t._v("\n")])])]),e("p",[t._v("面对一条比较复杂的指针或引用的声明语句时，"),e("mark",[t._v("从右向左")]),t._v("阅读有助于弄清它的真实含义。")]),t._v(" "),e("h2",{attrs:{id:"const限定符-const-qualifier"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#const限定符-const-qualifier"}},[t._v("#")]),t._v(" const限定符（Const Qualifier）")]),t._v(" "),e("p",[e("code",[t._v("const")]),t._v("声明该对象的值不能被改变。显然，此时对象必须先初始化。")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" bufSize "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("512")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// input buffer size")]),t._v("\nbufSize "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("512")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// error")]),t._v("\n")])])]),e("p",[t._v("默认情况下，全局的"),e("code",[t._v("const")]),t._v("对象仅在文件内有效。")]),t._v(" "),e("p",[t._v("如果想在多个文件间共享"),e("code",[t._v("const")]),t._v("对象：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("若"),e("code",[t._v("const")]),t._v("对象的值在"),e("mark",[t._v("编译时已经确定")]),t._v("，则应该"),e("mark",[t._v("定义在头文件")]),t._v("中。其他源文件包含该头文件时，不会产生重复定义错误。")])]),t._v(" "),e("li",[e("p",[t._v("若"),e("code",[t._v("const")]),t._v("对象的值直到"),e("mark",[t._v("运行时才能确定")]),t._v("，则应该"),e("mark",[t._v("在头文件中声明")]),t._v("，在源文件中定义。此时"),e("code",[t._v("const")]),t._v("变量的声明和定义前都应该添加"),e("code",[t._v("extern")]),t._v("关键字。")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// file_1.cc defines and initializes a const that is accessible to other files")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extern")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" bufSize "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("fcn")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// file_1.h")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extern")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" bufSize"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// same bufSize as defined in file_1.cc")]),t._v("\n")])])])])]),t._v(" "),e("h3",{attrs:{id:"const的引用-references-to-const"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#const的引用-references-to-const"}},[t._v("#")]),t._v(" const的引用（References to const）")]),t._v(" "),e("p",[t._v("引用常量对象。该引用不能被修改。")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" ci "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("r1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ci"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ok: both reference and underlying object are const")]),t._v("\nr1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// error: r1 is a reference to const")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("r2 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ci"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// error: non const reference to a const object")]),t._v("\n")])])]),e("p",[t._v("大部分情况下，引用的类型要与绑定的对象严格匹配。但是有两个例外：")]),t._v(" "),e("ul",[e("li",[t._v("常量引用允许用"),e("mark",[t._v("任意表达式")]),t._v("作为其初始值，只要其能转换成引用的类型。")])]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("r1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// we can bind a const int& to a plain int object")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("r2 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ok: r1 is a reference to const")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("r3 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" r1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ok: r3 is a reference to const")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("r4 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" r "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// error: r4 is a plain, non const reference")]),t._v("\n")])])]),e("ul",[e("li",[t._v("允许为一个常量引用绑定非常量的对象、字面值或者一般表达式。")])]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" dval "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.14")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("ri "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" dval"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ri = 3")]),t._v("\n")])])]),e("h3",{attrs:{id:"指针和const-pointers-and-const"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#指针和const-pointers-and-const"}},[t._v("#")]),t._v(" 指针和const（Pointers and const）")]),t._v(" "),e("p",[e("strong",[t._v("指向常量的指针（pointer to const）")]),t._v("：一个指针，指向常量。")]),t._v(" "),e("p",[t._v("常量对象的地址只能使用指向常量的指针来存放，但是指向常量的指针可以指向一个非常量对象。")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" pi "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.14")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// pi is const; its value may not be changed")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("pi"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("          "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// error: ptr is a plain pointer")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("cptr "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("pi"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ok: cptr may point to a double that is const")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("cptr "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("         "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// error: cannot assign to *cptr")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" dval "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.14")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// dval is a double; its value can be changed")]),t._v("\ncptr "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("dval"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ok: but can't change dval through cptr")]),t._v("\n")])])]),e("p",[e("strong",[t._v("常量指针（const pointer）")]),t._v("：指针本身是一个常量，不能改变，必须初始化。")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" errNumb "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" curErr "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("errNumb"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// curErr will always point to errNumb")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" pi "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.14159")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" pip "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("pi"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// pip is a const pointer to a const object")]),t._v("\n")])])]),e("h3",{attrs:{id:"顶层const-top-level-const"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#顶层const-top-level-const"}},[t._v("#")]),t._v(" 顶层const（Top-Level const）")]),t._v(" "),e("p",[t._v("顶层"),e("code",[t._v("const")]),t._v("：指针本身是个常量。\n底层"),e("code",[t._v("const")]),t._v("：指针所指的对象是一个常量。")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" p1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// we can't change the value of p1; const is top-level")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" ci "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// we cannot change ci; const is top-level")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p2 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("ci"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// we can change p2; const is low-level")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" p3 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// right-most const is top-level, left-most is not")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("r "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ci"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// const in reference types is always low-level")]),t._v("\n")])])]),e("p",[t._v("当执行拷贝操作时，常量是顶层"),e("code",[t._v("const")]),t._v("还是底层"),e("code",[t._v("const")]),t._v("区别明显：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("顶层"),e("code",[t._v("const")]),t._v("没有影响。拷贝操作不会改变被拷贝对象的值，因此拷入和拷出的对象是否是常量无关紧要。")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[t._v("i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ci"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ok: copying the value of ci; top-level const in ci is ignored")]),t._v("\np2 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p3"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ok: pointed-to type matches; top-level const in p3 is ignored")]),t._v("\n")])])])]),t._v(" "),e("li",[e("p",[t._v("为了避免底层数据被修改，拷入和拷出的对象必须具有相同的底层"),e("code",[t._v("const")]),t._v("资格。或者两个对象的数据类型可以相互转换。一般来说，非常量可以转换成常量，反之则不行。")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p3"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// error: p3 has a low-level const but p doesn't")]),t._v("\np2 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p3"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ok: p2 has the same low-level const qualification as p3")]),t._v("\np2 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ok: we can convert int* to const int*")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("r "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ci"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// error: can't bind an ordinary int& to a const int object")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("r2 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ok: can bind const int& to plain int")]),t._v("\n")])])])])]),t._v(" "),e("h3",{attrs:{id:"constexpr和常量表达式-constexpr-and-constant-expressions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#constexpr和常量表达式-constexpr-and-constant-expressions"}},[t._v("#")]),t._v(" constexpr和常量表达式（constexpr and Constant Expressions）")]),t._v(" "),e("p",[e("strong",[t._v("常量表达式")]),t._v("：值不会改变并且在编译过程就能得到计算结果的表达式。")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" max_files "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("           "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// max_files is a constant expression")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" limit "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" max_files "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// limit is a constant expression")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" staff_size "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("27")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// staff_size is not a constant expression")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sz "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// sz is not a constant expression")]),t._v("\n")])])]),e("p",[t._v("C++11允许将变量声明为"),e("code",[t._v("constexpr")]),t._v("类型以便"),e("mark",[t._v("由编译器来验证")]),t._v("其是否是一个常量表达式。")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("constexpr")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" mf "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("          "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 20 is a constant expression")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("constexpr")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" limit "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mf "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// mf + 1 is a constant expression")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("constexpr")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sz "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ok only if size is a constexpr function")]),t._v("\n")])])]),e("p",[t._v("指针和引用都能定义成"),e("code",[t._v("constexpr")]),t._v("，但是初始值受到严格限制。"),e("code",[t._v("constexpr")]),t._v("指针的初始值必须是0、"),e("code",[t._v("nullptr")]),t._v("或者是存储在某个固定地址中的对象。")]),t._v(" "),e("p",[t._v("函数体内定义的普通变量一般并非存放在固定地址中，因此"),e("code",[t._v("constexpr")]),t._v("指针不能指向这样的变量。相反，函数体外定义的变量地址固定不变，可以用来初始化"),e("code",[t._v("constexpr")]),t._v("指针。")]),t._v(" "),e("p",[t._v("在"),e("code",[t._v("constexpr")]),t._v("声明中如果定义了一个指针，限定符"),e("code",[t._v("constexpr")]),t._v("仅对指针本身有效，与指针所指的对象无关。"),e("code",[t._v("constexpr")]),t._v("把它所定义的对象置为了顶层"),e("code",[t._v("const")]),t._v("。")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("constexpr")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("nullptr")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// p是指向int的const指针")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("constexpr")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("constexpr")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("cp "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// cp是指向const int的const指针")]),t._v("\n")])])]),e("p",[e("code",[t._v("const")]),t._v("和"),e("code",[t._v("constexpr")]),t._v("限定的值都是常量。但"),e("code",[t._v("constexpr")]),t._v("对象的值必须在编译期间确定，而"),e("code",[t._v("const")]),t._v("对象的值可以延迟到运行期间确定。")]),t._v(" "),e("p",[t._v("建议使用"),e("code",[t._v("constexpr")]),t._v("修饰表示数组大小的对象，因为数组的大小必须在编译期间确定且不能改变。")]),t._v(" "),e("h2",{attrs:{id:"处理类型-dealing-with-types"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#处理类型-dealing-with-types"}},[t._v("#")]),t._v(" 处理类型（Dealing with Types）")]),t._v(" "),e("h3",{attrs:{id:"类型别名-type-aliases"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类型别名-type-aliases"}},[t._v("#")]),t._v(" 类型别名（Type Aliases）")]),t._v(" "),e("p",[t._v("一个类型的同义词，传统方法使用"),e("code",[t._v("typedef")]),t._v("。")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" wages"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// wages is a synonym for double")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" wages base"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// base is a synonym for double, p for double*")]),t._v("\n")])])]),e("p",[t._v("C++11使用关键字"),e("code",[t._v("using")]),t._v("进行别名声明（alias declaration）。")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" SI "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Sales_item"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// SI is a synonym for Sales_item")]),t._v("\n")])])]),e("h3",{attrs:{id:"auto类型说明符-the-auto-type-specifier"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#auto类型说明符-the-auto-type-specifier"}},[t._v("#")]),t._v(" auto类型说明符（The auto Type Specifier）")]),t._v(" "),e("p",[t._v("C++11新增"),e("code",[t._v("auto")]),t._v("类型说明符，能让"),e("mark",[t._v("编译器自动分析")]),t._v("表达式所属的类型。"),e("code",[t._v("auto")]),t._v("定义的变量必须有初始值。")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the type of item is deduced from the type of the result of adding val1 and val2")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" item "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" val1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" val2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// item initialized to the result of val1 + val2")]),t._v("\n")])])]),e("p",[t._v("编译器推断出来的"),e("code",[t._v("auto")]),t._v("类型有时和初始值的类型"),e("mark",[t._v("并不完全一样")]),t._v("：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("当引用被用作初始值时，推断为引用对象的类型。")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("r "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" r"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a is an int (r is an alias for i, which has type int)")]),t._v("\n")])])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("auto")]),t._v("一般会忽略顶层"),e("code",[t._v("const")]),t._v("。")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" ci "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("cr "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ci"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" b "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ci"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// b is an int (top-level const in ci is dropped)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" c "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// c is an int (cr is an alias for ci whose const is top-level)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" d "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// d is an int*(& of an int object is int*)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" e "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("ci"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// e is const int*(& of a const object is low-level const)")]),t._v("\n")])])]),e("p",[t._v("如果希望推断出的"),e("code",[t._v("auto")]),t._v("类型是一个顶层"),e("code",[t._v("const")]),t._v("，需要显式指定"),e("code",[t._v("const auto")]),t._v("。")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" f "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ci"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// deduced type of ci is int; f has type const int")]),t._v("\n")])])])])]),t._v(" "),e("p",[t._v("设置类型为"),e("code",[t._v("auto")]),t._v("的引用时，原来的初始化规则仍然适用，初始值中的顶层常量属性仍然保留。")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("g "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ci"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// g is a const int& that is bound to ci")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("h "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// error: we can't bind a plain reference to a literal")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("j "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ok: we can bind a const reference to a literal")]),t._v("\n")])])]),e("h3",{attrs:{id:"decltype类型指示符-the-decltype-type-specifier"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#decltype类型指示符-the-decltype-type-specifier"}},[t._v("#")]),t._v(" decltype类型指示符（The decltype Type Specifier）")]),t._v(" "),e("p",[t._v("C++11新增"),e("code",[t._v("decltype")]),t._v("类型指示符，作用是选择并返回操作数的数据类型，此过程中编译器不实际计算表达式的值。")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("decltype")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" sum "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// sum has whatever type f returns")]),t._v("\n")])])]),e("p",[e("code",[t._v("decltype")]),t._v("处理顶层"),e("code",[t._v("const")]),t._v("和引用的方式与"),e("code",[t._v("auto")]),t._v("有些不同，如果"),e("code",[t._v("decltype")]),t._v("使用的表达式是一个变量，则"),e("code",[t._v("decltype")]),t._v("返回该变量的类型（包括顶层"),e("code",[t._v("const")]),t._v("和引用）。")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" ci "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("cj "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ci"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("decltype")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ci"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" x "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// x has type const int")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("decltype")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cj"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" y "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// y has type const int& and is bound to x")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("decltype")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cj"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" z"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// error: z is a reference and must be initialized")]),t._v("\n")])])]),e("p",[t._v("如果"),e("code",[t._v("decltype")]),t._v("使用的表达式不是一个变量，则"),e("code",[t._v("decltype")]),t._v("返回表达式结果对应的类型。如果表达式的内容是解引用操作，则"),e("code",[t._v("decltype")]),t._v("将得到引用类型。如果"),e("code",[t._v("decltype")]),t._v("使用的是一个不加括号的变量，则得到的结果就是该变量的类型；如果给变量加上了一层或多层括号，则"),e("code",[t._v("decltype")]),t._v("会得到引用类型，因为变量是一种可以作为赋值语句左值的特殊表达式。")]),t._v(" "),e("p",[e("code",[t._v("decltype((var))")]),t._v("的结果永远是引用，而"),e("code",[t._v("decltype(var)")]),t._v("的结果只有当"),e("em",[t._v("var")]),t._v("本身是一个引用时才会是引用。")]),t._v(" "),e("h2",{attrs:{id:"自定义数据结构-defining-our-own-data-structures"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自定义数据结构-defining-our-own-data-structures"}},[t._v("#")]),t._v(" 自定义数据结构（Defining Our Own Data Structures）")]),t._v(" "),e("p",[t._v("C++11规定可以为类的数据成员（data member）提供一个类内初始值（in-class initializer）。创建对象时，类内初始值将用于初始化数据成员，没有初始值的成员将被默认初始化。")]),t._v(" "),e("p",[t._v("类内初始值不能使用圆括号。")]),t._v(" "),e("p",[t._v("类定义的最后应该加上分号。")]),t._v(" "),e("p",[t._v("头文件（header file）通常包含那些只能被定义一次的实体，如类、"),e("code",[t._v("const")]),t._v("和"),e("code",[t._v("constexpr")]),t._v("变量。当其改变，相关的源文件必须重新编译以获取更新之后的声明。")]),t._v(" "),e("p",[e("strong",[t._v("头文件保护符（header guard）")]),t._v(" 依赖于预处理变量（preprocessor variable）。\n预处理变量有两种状态：已定义和未定义。\n"),e("code",[t._v("#define")]),t._v("指令把一个名字设定为预处理变量，并定义。\n"),e("code",[t._v("#ifdef")]),t._v("指令当且仅当变量已定义时为真。\n"),e("code",[t._v("#ifndef")]),t._v("指令当且仅当变量未定义时为真。一旦检查结果为真，则执行后续操作直至遇到"),e("code",[t._v("#endif")]),t._v("指令为止。")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("ifndef")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token expression"}},[t._v("SALES_DATA_H")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("SALES_DATA_H")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("<string>")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Sales_data")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    std"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("string bookNo"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" units_sold "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" revenue "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")])]),t._v("\n")])])]),e("blockquote",[e("p",[t._v("在高级版本的IDE环境中，可以直接使用"),e("code",[t._v("#pragma once")]),t._v("命令来防止头文件的重复包含。")])]),t._v(" "),e("p",[t._v("预处理变量无视C++语言中关于作用域的规则。")]),t._v(" "),e("p",[t._v("整个程序中的预处理变量的命名必须唯一。预处理变量的名字一般均为大写。")]),t._v(" "),e("blockquote",[e("p",[t._v("头文件即使目前还没有被包含在任何其他头文件中，也应该设置保护符。")])])])}),[],!1,null,null,null);s.default=n.exports},743:function(t,s,a){t.exports=a.p+"assets/img/2-1.91dab1bf.png"},744:function(t,s){t.exports="data:image/png;base64,"},745:function(t,s){t.exports="data:image/png;base64,"}}]);