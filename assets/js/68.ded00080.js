(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{1389:function(t,s,a){"use strict";a.r(s);var e=a(7),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"基础-fundamentals"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基础-fundamentals"}},[t._v("#")]),t._v(" 基础（Fundamentals）")]),t._v(" "),e("p",[t._v("表达式由一个或多个运算对象组成，对表达式求值将得到一个结果。字面值和变量是最简单的表达式，其结果就是字面值和变量的值。")]),t._v(" "),e("h3",{attrs:{id:"基础概念-basic-concepts"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基础概念-basic-concepts"}},[t._v("#")]),t._v(" 基础概念（Basic Concepts）")]),t._v(" "),e("p",[t._v("cpp定义了一元运算符（unary operator）和二元运算符（binary operator）。除此之外，还有一个作用于三个运算对象的三元运算符。函数调用也是一种特殊的运算符，它对运算对象的数量没有限制。")]),t._v(" "),e("p",[t._v("表达式求值过程中，小整数类型（如"),e("code",[t._v("bool")]),t._v("、"),e("code",[t._v("char")]),t._v("、"),e("code",[t._v("short")]),t._v("等）通常会被提升（promoted）为较大的整数类型，主要是"),e("code",[t._v("int")]),t._v("。")]),t._v(" "),e("p",[t._v("cpp定义了运算符作用于"),e("mark",[t._v("内置类型")]),t._v("和"),e("mark",[t._v("复合类型")]),t._v("的运算对象时所执行的操作。当运算符作用于"),e("mark",[t._v("类类型")]),t._v("的运算对象时，用户可以自定义其含义，这被称作"),e("strong",[t._v("运算符重载")]),t._v("（overloaded operator）。")]),t._v(" "),e("p",[t._v("cpp的表达式分为"),e("strong",[t._v("右值")]),t._v("（rvalue）和"),e("strong",[t._v("左值")]),t._v("（lvalue）。当一个对象被用作右值的时候，用的是对象的值；当对象被用作左值时，用的是对象的地址。需要右值的地方可以用左值代替，反之则不行。")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("赋值运算符需要一个非常量左值作为其左侧运算对象，返回结果也是一个左值。")])]),t._v(" "),e("li",[e("p",[t._v("取地址符作用于左值运算对象，返回指向该运算对象的指针，该指针是一个右值。")])]),t._v(" "),e("li",[e("p",[t._v("内置解引用运算符、下标运算符、迭代器解引用运算符、"),e("code",[t._v("string")]),t._v("和"),e("code",[t._v("vector")]),t._v("的下标运算符都返回左值。")])]),t._v(" "),e("li",[e("p",[t._v("内置类型和迭代器的递增递减运算符作用于左值运算对象。前置版本返回左值，后置版本返回右值。")])])]),t._v(" "),e("p",[t._v("如果"),e("code",[t._v("decltype")]),t._v("作用于一个求值结果是左值的表达式，会得到"),e("mark",[t._v("引用类型")]),t._v("。")]),t._v(" "),e("h3",{attrs:{id:"优先级与结合律-precedence-and-associativity"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#优先级与结合律-precedence-and-associativity"}},[t._v("#")]),t._v(" 优先级与结合律（Precedence and Associativity）")]),t._v(" "),e("p",[t._v("复合表达式（compound expression）指含有两个或多个运算符的表达式。优先级与结合律决定了运算对象的组合方式。")]),t._v(" "),e("p",[t._v("括号无视优先级与结合律，表达式中括号括起来的部分被当成一个单元来求值，然后再与其他部分一起按照优先级组合。")]),t._v(" "),e("h3",{attrs:{id:"求值顺序-order-of-evaluation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#求值顺序-order-of-evaluation"}},[t._v("#")]),t._v(" 求值顺序（Order of Evaluation）")]),t._v(" "),e("p",[t._v("对于那些没有指定执行顺序的运算符来说，如果表达式指向并修改了同一个对象，将会引发错误并产生"),e("mark",[t._v("未定义的行为")]),t._v("。")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncout "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\n")])])]),e("p",[t._v("处理复合表达式时建议遵循以下两点：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("不确定求值顺序时，使用括号。")])]),t._v(" "),e("li",[e("p",[t._v("如果表达式改变了某个运算对象的值，则在表达式的其他位置不要再使用这个运算对象。")])])]),t._v(" "),e("p",[t._v("当改变运算对象的子表达式本身就是另一个子表达式的运算对象时，第二条规则无效。如"),e("code",[t._v("*++iter")]),t._v("，递增运算符改变了"),e("code",[t._v("iter")]),t._v("的值，而改变后的"),e("code",[t._v("iter")]),t._v("又是解引用运算符的运算对象。类似情况下，求值的顺序不会成为问题。")]),t._v(" "),e("h2",{attrs:{id:"算术运算符-arithmetic-operators"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#算术运算符-arithmetic-operators"}},[t._v("#")]),t._v(" 算术运算符（Arithmetic Operators）")]),t._v(" "),e("p",[t._v("算术运算符（左结合律）：")]),t._v(" "),e("p",[e("img",{attrs:{src:a(761),alt:"4-1"}})]),t._v(" "),e("p",[t._v("在除法运算中，cpp语言的早期版本允许结果为负数的商向上或向下取整，cpp11新标准则规定商一律向0取整（即直接去除小数部分）。")]),t._v(" "),e("h2",{attrs:{id:"逻辑和关系运算符-logical-and-relational-operators"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#逻辑和关系运算符-logical-and-relational-operators"}},[t._v("#")]),t._v(" 逻辑和关系运算符（Logical and Relational Operators）")]),t._v(" "),e("p",[t._v("关系运算符作用于算术类型和指针类型，逻辑运算符作用于任意能转换成布尔值的类型。逻辑运算符和关系运算符的返回值都是布尔类型。")]),t._v(" "),e("p",[e("img",{attrs:{src:a(762),alt:"4-2"}})]),t._v(" "),e("p",[t._v("运算符"),e("code",[t._v("&&")]),t._v("和"),e("code",[t._v("||")]),t._v("的计算遵循「短路求值」策略：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("对于"),e("code",[t._v("&&")]),t._v("，当且仅当左侧运算对象为真时才对右侧运算对象求值。")])]),t._v(" "),e("li",[e("p",[t._v("对于"),e("code",[t._v("||")]),t._v("，当且仅当左侧运算对象为假时才对右侧运算对象求值。")])])]),t._v(" "),e("p",[t._v("进行比较运算时，除非比较的对象是布尔类型，否则不要使用布尔字面值"),e("code",[t._v("true")]),t._v("和"),e("code",[t._v("false")]),t._v("作为运算对象。")]),t._v(" "),e("h2",{attrs:{id:"赋值运算符-assignment-operators"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#赋值运算符-assignment-operators"}},[t._v("#")]),t._v(" 赋值运算符（Assignment Operators）")]),t._v(" "),e("p",[t._v("赋值运算符的返回结果是一个左值，满足右结合律。")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" ival"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" jval"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nival "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" jval "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ok: each assigned 0")]),t._v("\n")])])]),e("blockquote",[e("p",[t._v("赋值运算符的优先级低于关系运算符的优先级。在条件语句中，赋值部分通常应该加上括号。")])]),t._v(" "),e("p",[t._v("复合赋值运算符包括"),e("code",[t._v("+=")]),t._v("、"),e("code",[t._v("-=")]),t._v("、"),e("code",[t._v("*=")]),t._v("、"),e("code",[t._v("/=")]),t._v("、"),e("code",[t._v("%=")]),t._v("、"),e("code",[t._v("<<=")]),t._v("、"),e("code",[t._v(">>=")]),t._v("、"),e("code",[t._v("&=")]),t._v("、"),e("code",[t._v("^=")]),t._v("和"),e("code",[t._v("|=")]),t._v("。任意一种复合运算都完全等价于"),e("em",[t._v("a = a op b")]),t._v("。")]),t._v(" "),e("h2",{attrs:{id:"递增和递减运算符-increment-and-decrement-operators"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#递增和递减运算符-increment-and-decrement-operators"}},[t._v("#")]),t._v(" 递增和递减运算符（Increment and Decrement Operators）")]),t._v(" "),e("p",[t._v("递增和递减运算符是为对象加1或减1的简洁书写形式。很多不支持算术运算的迭代器可以使用递增和递减运算符。")]),t._v(" "),e("p",[t._v("递增和递减运算符分为前置版本和后置版本，两者都先使运算对象加1（或减1）。")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("前置版本将改变后的对象作为求值结果。")])]),t._v(" "),e("li",[e("p",[t._v("后置版本将改变前的对象作为求值结果（一个副本）。")])])]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" j"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nj "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// j = 1, i = 1: prefix yields the incremented value")]),t._v("\nj "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// j = 1, i = 2: postfix yields the unincremented value")]),t._v("\n")])])]),e("blockquote",[e("p",[t._v("一般的，优先使用前置版本。")])]),t._v(" "),e("p",[t._v("在某些语句中混用解引用和递增运算符可以使程序更简洁。")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[t._v("cout "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("iter"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h2",{attrs:{id:"成员访问运算符-the-member-access-operators"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#成员访问运算符-the-member-access-operators"}},[t._v("#")]),t._v(" 成员访问运算符（The Member Access Operators）")]),t._v(" "),e("p",[t._v("点运算符"),e("code",[t._v(".")]),t._v("和箭头运算符"),e("code",[t._v("->")]),t._v("都可以用来访问成员，表达式"),e("code",[t._v("ptr->mem")]),t._v("等价于"),e("code",[t._v("(*ptr).mem")]),t._v("。")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[t._v("string s1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a string"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("s1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" n "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// run the size member of the string s1")]),t._v("\nn "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// run size on the object to which p points")]),t._v("\nn "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// equivalent to (*p).size()")]),t._v("\n")])])]),e("h2",{attrs:{id:"条件运算符-the-conditional-operator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#条件运算符-the-conditional-operator"}},[t._v("#")]),t._v(" 条件运算符（The Conditional Operator）")]),t._v(" "),e("p",[t._v("条件运算符的使用形式如下：")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[t._v("cond "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" expr1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" expr2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("只有当条件运算符的两个表达式都是左值或者能转换成同一种左值类型时，运算的结果才是左值，否则运算的结果就是右值。")]),t._v(" "),e("h2",{attrs:{id:"位运算符-the-bitwise-operators"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#位运算符-the-bitwise-operators"}},[t._v("#")]),t._v(" 位运算符（The Bitwise Operators）")]),t._v(" "),e("p",[t._v("位运算符（左结合律）：")]),t._v(" "),e("p",[e("img",{attrs:{src:a(763),alt:"4-3"}})]),t._v(" "),e("p",[t._v("在位运算中符号位如何处理并没有明确的规定，所以建议仅将位运算符用于无符号类型的处理。")]),t._v(" "),e("p",[t._v("左移运算符"),e("code",[t._v("<<")]),t._v("在运算对象右侧插入值为0的二进制位。右移运算符"),e("code",[t._v(">>")]),t._v("的行为依赖于其左侧运算对象的类型：如果该运算对象是无符号类型，在其左侧插入值为0的二进制位；如果是带符号类型，在其左侧插入符号位的副本或者值为0的二进制位，如何选择视具体环境而定。")]),t._v(" "),e("h2",{attrs:{id:"sizeof运算符-the-sizeof-operator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sizeof运算符-the-sizeof-operator"}},[t._v("#")]),t._v(" sizeof运算符（The sizeof Operator）")]),t._v(" "),e("p",[e("code",[t._v("sizeof")]),t._v("运算符返回一个表达式或一个类型名字所占的字节数，返回值是"),e("code",[t._v("size_t")]),t._v("类型。")]),t._v(" "),e("p",[t._v("在"),e("code",[t._v("sizeof")]),t._v("的运算对象中解引用一个无效指针仍然是一种安全的行为，因为指针实际上并没有被真正使用。")]),t._v(" "),e("p",[e("code",[t._v("sizeof")]),t._v("运算符的结果部分依赖于其作用的类型：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("对"),e("code",[t._v("char")]),t._v("或者类型为"),e("code",[t._v("char")]),t._v("的表达式执行"),e("code",[t._v("sizeof")]),t._v("运算，返回值为1。")])]),t._v(" "),e("li",[e("p",[t._v("对引用类型执行"),e("code",[t._v("sizeof")]),t._v("运算得到被引用对象所占空间的大小。")])]),t._v(" "),e("li",[e("p",[t._v("对指针执行"),e("code",[t._v("sizeof")]),t._v("运算得到指针本身所占空间的大小。")])]),t._v(" "),e("li",[e("p",[t._v("对解引用指针执行"),e("code",[t._v("sizeof")]),t._v("运算得到指针指向的对象所占空间的大小，指针不需要有效。")])]),t._v(" "),e("li",[e("p",[t._v("对数组执行"),e("code",[t._v("sizeof")]),t._v("运算得到整个数组所占空间的大小。")])]),t._v(" "),e("li",[e("p",[t._v("对"),e("code",[t._v("string")]),t._v("或"),e("code",[t._v("vector")]),t._v("对象执行"),e("code",[t._v("sizeof")]),t._v("运算"),e("mark",[t._v("只返回该类型固定部分的大小")]),t._v("，不会计算对象中元素所占空间的大小。")])])]),t._v(" "),e("h2",{attrs:{id:"逗号运算符-comma-operator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#逗号运算符-comma-operator"}},[t._v("#")]),t._v(" 逗号运算符（Comma Operator）")]),t._v(" "),e("p",[t._v("逗号运算符"),e("code",[t._v(",")]),t._v("含有两个运算对象，按照从左向右的顺序依次求值，最后"),e("mark",[t._v("返回右侧表达式的值")]),t._v("。逗号运算符经常用在"),e("code",[t._v("for")]),t._v("循环中。")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[t._v("vector"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("size_type cnt "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ivec"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// assign values from size... 1 to the elements in ivec")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vector"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("size_type ix "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" ix "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" ivec"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("ix"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("cnt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    ivec"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("ix"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cnt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h2",{attrs:{id:"类型转换-type-conversions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类型转换-type-conversions"}},[t._v("#")]),t._v(" 类型转换（Type Conversions）")]),t._v(" "),e("p",[t._v("无须程序员介入，会自动执行的类型转换叫做"),e("strong",[t._v("隐式转换")]),t._v("（implicit conversions）。")]),t._v(" "),e("h3",{attrs:{id:"算术转换-integral-promotions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#算术转换-integral-promotions"}},[t._v("#")]),t._v(" 算术转换（Integral Promotions）")]),t._v(" "),e("p",[t._v("把一种算术类型转换成另一种算术类型叫做算术转换。")]),t._v(" "),e("p",[t._v("整型提升（integral promotions）负责把小整数类型转换成较大的整数类型。")]),t._v(" "),e("h3",{attrs:{id:"其他隐式类型转换-other-implicit-conversions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其他隐式类型转换-other-implicit-conversions"}},[t._v("#")]),t._v(" 其他隐式类型转换（Other Implicit Conversions）")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("在大多数表达式中，数组名字自动转换成指向数组首元素的指针。")])]),t._v(" "),e("li",[e("p",[t._v("常量整数值0或字面值"),e("code",[t._v("nullptr")]),t._v("能转换成任意指针类型；指向任意非常量的指针能转换成"),e("code",[t._v("void*")]),t._v("；指向任意对象的指针能转换成"),e("code",[t._v("const void*")]),t._v("。")])]),t._v(" "),e("li",[e("p",[t._v("任意一种算术类型或指针类型都能转换成布尔类型。如果指针或算术类型的值为0，转换结果是"),e("code",[t._v("false")]),t._v("，否则是"),e("code",[t._v("true")]),t._v("。")])]),t._v(" "),e("li",[e("p",[t._v("指向非常量类型的指针能转换成指向相应的常量类型的指针。")])])]),t._v(" "),e("h3",{attrs:{id:"显式转换-explicit-conversions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#显式转换-explicit-conversions"}},[t._v("#")]),t._v(" 显式转换（Explicit Conversions）")]),t._v(" "),e("p",[t._v("显式类型转换也叫做强制类型转换（cast）。")]),t._v(" "),e("div",{staticClass:"custom-block danger"},[e("p",{staticClass:"title"}),e("p",[t._v("虽然有时不得不使用强制类型转换，但这种方法本质上是非常危险的。建议尽量避免强制类型转换。")])]),e("p",[t._v("命名的强制类型转换（named cast）形式如下：")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[t._v("cast"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("name"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("type"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expression"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("其中"),e("code",[t._v("type")]),t._v("是转换的目标类型，"),e("code",[t._v("expression")]),t._v("是要转换的值。如果"),e("code",[t._v("type")]),t._v("是引用类型，则转换结果是左值。")]),t._v(" "),e("p",[e("code",[t._v("cast-name")]),t._v("是"),e("code",[t._v("static_cast")]),t._v("、"),e("code",[t._v("dynamic_cast")]),t._v("、"),e("code",[t._v("const_cast")]),t._v("和"),e("code",[t._v("reinterpret_cast")]),t._v("中的一种，用来指定转换的方式。")]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("dynamic_cast")]),t._v("支持运行时类型识别。")])]),t._v(" "),e("li",[e("p",[t._v("任何具有明确定义的类型转换，只要不包含底层"),e("code",[t._v("const")]),t._v("，都能使用"),e("code",[t._v("static_cast")]),t._v("。")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("const_cast")]),t._v("只能改变运算对象的底层"),e("code",[t._v("const")]),t._v("，不能改变表达式的类型。同时也只有"),e("code",[t._v("const_cast")]),t._v("能改变表达式的常量属性。"),e("code",[t._v("const_cast")]),t._v("常常用于函数重载。")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("reinterpret_cast")]),t._v("通常为运算对象的位模式提供底层上的重新解释。")])])]),t._v(" "),e("p",[t._v("早期版本的cpp语言中，显式类型转换包含两种形式：")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("type")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expression"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// function-style cast notation")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" expression"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// C-language-style cast notation")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=r.exports},761:function(t,s,a){t.exports=a.p+"assets/img/4-1.1bc75b80.png"},762:function(t,s,a){t.exports=a.p+"assets/img/4-2.477265a3.png"},763:function(t,s,a){t.exports=a.p+"assets/img/4-3.3092780f.png"}}]);