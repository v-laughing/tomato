(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{1063:function(v,_,t){v.exports=t.p+"assets/img/git-areas.6f7a9afa.png"},1064:function(v,_,t){v.exports=t.p+"assets/img/git-branch.3554acad.png"},1065:function(v,_,t){v.exports=t.p+"assets/img/git-branch-merge.d8736122.png"},1066:function(v,_,t){v.exports=t.p+"assets/img/git-rebase.02d28458.png"},1067:function(v,_,t){v.exports=t.p+"assets/img/git-reset-checkout.0c12d0a8.png"},1068:function(v,_,t){v.exports=t.p+"assets/img/7a29acce-f243-4914-9f00-f2988c528412.4072191d.jpg"},1354:function(v,_,t){"use strict";t.r(_);var e=t(7),a=Object(e.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h1",{attrs:{id:"基础"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[v._v("#")]),v._v(" 基础")]),v._v(" "),e("p",[v._v("新建一个仓库之后，当前目录就成为了工作区，工作区下有一个隐藏目录 .git，它属于 Git 的版本库，存储着所有的提交信息。")]),v._v(" "),e("h2",{attrs:{id:"三种状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三种状态"}},[v._v("#")]),v._v(" 三种状态")]),v._v(" "),e("p",[e("strong",[v._v("Git")]),v._v("将数据划分为三个区域：工作区、暂存区以及 Git 目录。")]),v._v(" "),e("p",[e("strong",[v._v("工作区")]),v._v("：保存当前正在编辑的文件。")]),v._v(" "),e("p",[e("strong",[v._v("暂存区")]),v._v("：保存"),e("mark",[v._v("下次将要提交")]),v._v("的文件列表信息。")]),v._v(" "),e("p",[e("strong",[v._v("Git 目录")]),v._v("：保存项目的所有元数据和对象数据库的地方，是"),e("strong",[v._v("Git")]),v._v("的核心。")]),v._v(" "),e("p",[v._v("三个工作区对应的文件的状态分别是："),e("strong",[v._v("已修改")]),v._v("，"),e("strong",[v._v("已暂存")]),v._v("，"),e("strong",[v._v("已提交")]),v._v("。")]),v._v(" "),e("p",[e("img",{attrs:{src:t(1063),alt:"avatar"}}),e("br")]),v._v(" "),e("p",[v._v("根据是否已纳入版本管理，即是否被提交到了git目录，文件可分为"),e("strong",[v._v("已跟踪")]),v._v("和"),e("strong",[v._v("未跟踪")]),v._v("两种状态。本地新建的文件都属于"),e("strong",[v._v("未跟踪")]),v._v("状态。")]),v._v(" "),e("h2",{attrs:{id:"基本工作流"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本工作流"}},[v._v("#")]),v._v(" 基本工作流")]),v._v(" "),e("p",[e("strong",[v._v("新建仓库")])]),v._v(" "),e("ol",[e("li",[v._v("本地项目使用git进行管理："),e("code",[v._v("git init")])]),v._v(" "),e("li",[v._v("从远程git仓库复制项目："),e("code",[v._v("git clone <url>")])])]),v._v(" "),e("p",[e("strong",[v._v("暂存")]),v._v("\n提交文件到暂存区。可使用通配符。")]),v._v(" "),e("ol",[e("li",[v._v("所有文件："),e("code",[v._v("git add .")])]),v._v(" "),e("li",[v._v("指定文件："),e("code",[v._v("git add <file1> <file2> ...")])]),v._v(" "),e("li",[v._v("某个目录内："),e("code",[v._v("git add [dir]")])])]),v._v(" "),e("p",[e("strong",[v._v("提交")])]),v._v(" "),e("ol",[e("li",[v._v("将暂存区中的文件"),e("mark",[v._v("提交到本地仓库")]),v._v("中，打上新版本："),e("code",[v._v('git commit -m "commit_info"')])]),v._v(" "),e("li",[v._v("将所有"),e("strong",[v._v("已跟踪")]),v._v("文件暂存后一并提交："),e("code",[v._v('git commit -a -m "commit_info"')])]),v._v(" "),e("li",[v._v("修补提交，将此次提交合并到上一次提交中："),e("code",[v._v("git commit --amend")])])]),v._v(" "),e("h2",{attrs:{id:"打标签"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#打标签"}},[v._v("#")]),v._v(" 打标签")]),v._v(" "),e("p",[v._v("给仓库历史中的某一个提交打上标签，以示重要，例如使用这个功能来标记"),e("strong",[v._v("发布结点")]),v._v("。")]),v._v(" "),e("p",[v._v("Git 标签类型有两种："),e("strong",[v._v("轻量标签")]),v._v("和"),e("strong",[v._v("附注标签")]),v._v("。")]),v._v(" "),e("p",[e("strong",[v._v("轻量标签")]),v._v("：指向特定提交对象的引用。\n"),e("strong",[v._v("附注标签")]),v._v("：存储在仓库中的一个独立对象，包含附注信息，如标签名，电子邮件，作者等。一般情况下用这个。")]),v._v(" "),e("ol",[e("li",[v._v("列出现在所有的标签："),e("code",[v._v("git tag")])]),v._v(" "),e("li",[v._v("创建轻量标签："),e("code",[v._v("git tag v1.5")])]),v._v(" "),e("li",[v._v("创建附注标签："),e("code",[v._v('git tag -a v1.4 -m "my version 1.4"')])]),v._v(" "),e("li",[v._v("对某个提交记录打标签："),e("code",[v._v("git tag -a v1.4 7dksdged")])]),v._v(" "),e("li",[v._v("查看相应标签信息："),e("code",[v._v("git show v1.4")])]),v._v(" "),e("li",[v._v("删除标签："),e("code",[v._v("git tag -d v1.4")])])]),v._v(" "),e("h3",{attrs:{id:"共享标签"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#共享标签"}},[v._v("#")]),v._v(" 共享标签")]),v._v(" "),e("p",[v._v("标签需要"),e("strong",[v._v("手动同步")]),v._v("到远程仓库。")]),v._v(" "),e("ol",[e("li",[v._v("指定标签推送："),e("code",[v._v("git push origin v1.5")])]),v._v(" "),e("li",[v._v("本地所有标签推送："),e("code",[v._v("git push origin --tags")])]),v._v(" "),e("li",[v._v("删除远程标签："),e("code",[v._v("git push origin --delete v1.4")])])]),v._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[v._v('12.  6.  如果有自己的私钥，可以使用GPG来签署标签，只需要在命令中使用`-s`参数：`git tag -s v1.5 -m "my signed 1.5 tag"`;\n13.  验证已签署的标签：git tag -v ，如`git tag -v v1.5`;\n14.   使用特定的搜索模式列出符合条件的标签，例如只对1.4.2系列的版本感兴趣：`git tag -l "v1.4.2.*"`;\n')])])]),e("h2",{attrs:{id:"分支管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分支管理"}},[v._v("#")]),v._v(" 分支管理")]),v._v(" "),e("p",[e("strong",[v._v("Git的基本工作原理")]),v._v("：Git 保存的不是文件的变化或者差异，而是一系列不同时刻的"),e("strong",[v._v("快照")]),v._v("。在进行提交操作时，Git 会保存一个"),e("strong",[v._v("提交对象")]),v._v("，该对象包含：提交信息、指向"),e("strong",[v._v("树对象")]),v._v("的指针（包含所有文件快照的指针信息）、指向上次提交对象（"),e("strong",[v._v("父对象")]),v._v("）的指针。")]),v._v(" "),e("p",[v._v("Git 的分支，本质上仅仅是指向提交对象的"),e("strong",[v._v("可变指针")]),v._v("，其沿着指针链路构成一个分支。")]),v._v(" "),e("p",[e("img",{attrs:{src:t(1064),alt:"avatar"}}),e("br")]),v._v(" "),e("p",[e("code",[v._v("master")]),v._v("是默认分支。"),e("code",[v._v("HEAD")]),v._v("指针指向"),e("mark",[v._v("当前所在的本地分支")]),v._v("，随着提交操作自动向前移动。")]),v._v(" "),e("ol",[e("li",[v._v("创建分支："),e("code",[v._v("git branch testing")])]),v._v(" "),e("li",[v._v("切换到其他分支，此时"),e("code",[v._v("HEAD")]),v._v("指向该分支："),e("code",[v._v("git checkout testing")])]),v._v(" "),e("li",[v._v("新建并切换到分支上："),e("code",[v._v("git checkout -b <branch-name>")])]),v._v(" "),e("li",[v._v("删除分支："),e("code",[v._v("git branch -d <branch-name>")])])]),v._v(" "),e("h3",{attrs:{id:"分支合并"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分支合并"}},[v._v("#")]),v._v(" 分支合并")]),v._v(" "),e("p",[v._v("将两个分支的内容合并在一起。")]),v._v(" "),e("p",[e("img",{attrs:{src:t(1065),alt:"avatar"}}),e("br")]),v._v(" "),e("p",[e("strong",[v._v("快进(fast-forward)")]),v._v("：当顺着一个分支走下去能够到达另一个分支时，会简单地将指针向前推进。例如"),e("code",[v._v("hotfix")]),v._v("合并入"),e("code",[v._v("master")]),v._v("，会将"),e("code",[v._v("master")]),v._v("指针向前移。")]),v._v(" "),e("p",[e("strong",[v._v("三方合并")]),v._v("：两个分支分叉开时，Git 会使用两个分支的末端所指的快照（C4 和 C5）以及这两个分支的公共祖先（C2），做一个简单的三方合并。")]),v._v(" "),e("p",[v._v("三方合并会产生一个提交——"),e("strong",[v._v("合并提交")]),v._v("，指向两个分支的末端提交（C4 和 C5）。")]),v._v(" "),e("ol",[e("li",[v._v("将指定分支合并入当前分支："),e("code",[v._v("git merge hotfix")])]),v._v(" "),e("li",[v._v("把远程分支合并到当前分支："),e("code",[v._v("git merge <remote-name>/<branch-name>")]),v._v("。")])]),v._v(" "),e("h3",{attrs:{id:"冲突"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#冲突"}},[v._v("#")]),v._v(" 冲突")]),v._v(" "),e("p",[v._v("当两个分支都对同一个文件的同一行进行了修改，在分支合并时就会产生冲突。")]),v._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[v._v("<<<<<<< HEAD\nCreating a new branch is quick & simple.\n<mark>=</mark>==\nCreating a new branch is quick AND simple.\n>>>>>>> feature1\n")])])]),e("h3",{attrs:{id:"变基"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#变基"}},[v._v("#")]),v._v(" 变基")]),v._v(" "),e("p",[v._v("分支整合的另一种方式。将提交到某一分支上的所有修改都移至另一分支上。变基与合并的结果没有不同。但变基使得提交历史更加整洁。")]),v._v(" "),e("p",[e("img",{attrs:{src:t(1066),alt:"avatar"}}),e("br")]),v._v(" "),e("p",[v._v("变基整合的流程为：")]),v._v(" "),e("ol",[e("li",[v._v("将当前分支"),e("code",[v._v("test")]),v._v("变基到分支"),e("code",[v._v("master")]),v._v("："),e("code",[v._v("git rebase master")])]),v._v(" "),e("li",[v._v("切换回"),e("code",[v._v("master")]),v._v("："),e("code",[v._v("git checkout master")])]),v._v(" "),e("li",[v._v("快进合并："),e("code",[v._v("git merge test")])])]),v._v(" "),e("p",[v._v("如果想要将分支中的某个"),e("mark",[v._v("相对独立的部分")]),v._v("变基。例如，在 "),e("code",[v._v("client")]),v._v(" 分支里但不在"),e("code",[v._v("server")]),v._v(" 分支里的修改，将它们变基在到 "),e("code",[v._v("master")]),v._v(" 分支上："),e("code",[v._v("git rebase --onto master server client")]),v._v("。")]),v._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"title"}),e("p",[v._v("一旦该分支发布到公共仓库，就千万不要对该分支进行rebase操作。")])]),e("h3",{attrs:{id:"查看信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看信息"}},[v._v("#")]),v._v(" 查看信息")]),v._v(" "),e("ol",[e("li",[v._v("显示"),e("strong",[v._v("本地仓库")]),v._v("的所有分支："),e("code",[v._v("git branch")])]),v._v(" "),e("li",[v._v("查看哪些分支已经合并到当前分支："),e("code",[v._v("git branch --merged")])]),v._v(" "),e("li",[v._v("查看哪些分支还没有合并到当前分支："),e("code",[v._v("git branch --no-merged")])])]),v._v(" "),e("blockquote",[e("p",[e("mark",[v._v("未合并的分支")]),v._v("不能直接删除，要加"),e("code",[v._v("-D")]),v._v("选项。")])]),v._v(" "),e("h2",{attrs:{id:"远程仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#远程仓库"}},[v._v("#")]),v._v(" 远程仓库")]),v._v(" "),e("p",[v._v("克隆"),e("code",[v._v("git clone")]),v._v("一个远程仓库，远程仓库名默认为"),e("code",[v._v("origin")]),v._v("。")]),v._v(" "),e("ol",[e("li",[v._v("查看本地仓库关联的远程仓库："),e("code",[v._v("git remote -v")])]),v._v(" "),e("li",[v._v("添加远程仓库："),e("code",[v._v("git remote add [remote-name] [url]")])]),v._v(" "),e("li",[v._v("从远程仓库中抓取本地仓库中没有的更新："),e("code",[v._v("git fetch [remote-name]")]),v._v("。")])]),v._v(" "),e("blockquote",[e("p",[v._v("包含所有分支的内容。使用fetch只是将远端数据拉到本地仓库，"),e("mark",[v._v("不会自动合并")]),v._v("到当前工作分支。")])]),v._v(" "),e("ol",{attrs:{start:"4"}},[e("li",[v._v("远程仓库重命名："),e("code",[v._v("git remote rename [old-name] [new-name]")])]),v._v(" "),e("li",[v._v("移除远程仓库："),e("code",[v._v("git remote rm [remote-name]")])]),v._v(" "),e("li",[v._v("查看远程仓库的详细信息："),e("code",[v._v("git remote show origin")])])]),v._v(" "),e("h3",{attrs:{id:"远程分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#远程分支"}},[v._v("#")]),v._v(" 远程分支")]),v._v(" "),e("p",[e("strong",[v._v("远程分支引用")]),v._v("：利用"),e("code",[v._v("git fetch")]),v._v("抓取远程仓库数据时，在本地有远程分支的引用"),e("code",[v._v("<remote>/<branch>")]),v._v("。")]),v._v(" "),e("p",[e("strong",[v._v("远程跟踪分支")]),v._v("：关联某个远程分支的本地分支，对其进行数据抓取与合并。")]),v._v(" "),e("blockquote",[e("p",[v._v("克隆一个仓库时，会自动地创建一个跟踪 origin/master 的 master分支。")])]),v._v(" "),e("ol",[e("li",[e("p",[v._v("创建并切换到远程跟踪分支： "),e("code",[v._v("git checkout -b <branch <remote>/<branch>")]),v._v("。如果分支不存在且刚好只有一个名字与之匹配的远程分支，可使用"),e("code",[v._v("git checkout <branch>")]),v._v("。")])]),v._v(" "),e("li",[e("p",[v._v("拉取远程分支数据并入本地相应的远程跟踪分支："),e("code",[v._v("git pull")])])]),v._v(" "),e("li",[e("p",[v._v("推送数据并合并入相应的远程分支："),e("code",[v._v("git push")])])]),v._v(" "),e("li",[e("p",[v._v("将本地分支推送到远程仓库上："),e("code",[v._v("git push [remote-name] [branch-name]")]),v._v("；不同名分支时："),e("code",[v._v("git push <remote-name> <local-branch>:<remote-branch>")]),v._v("。")])]),v._v(" "),e("li",[e("p",[v._v("删除远程分支："),e("code",[v._v("git push [romote-name] :<remote-branch>")]),v._v("，即把空白的本地分支推送到远程。也可以这样："),e("code",[v._v("git push origin --delete <remote-branch>")]),v._v("。")])])]),v._v(" "),e("h2",{attrs:{id:"文件忽略"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#文件忽略"}},[v._v("#")]),v._v(" 文件忽略")]),v._v(" "),e("p",[v._v("通过编写"),e("code",[v._v(".gitignore")]),v._v(" 文件来指定不需要进行版本管理的文件。")]),v._v(" "),e("p",[v._v("常见的，忽略以下文件：")]),v._v(" "),e("ul",[e("li",[v._v("操作系统自动生成的文件，比如缩略图；")]),v._v(" "),e("li",[v._v("编译生成的中间文件，比如 Java 编译产生的 .class 文件；")]),v._v(" "),e("li",[v._v("自己的敏感信息，比如存放口令的配置文件。")])]),v._v(" "),e("p",[v._v("不需要全部自己编写，可以到 "),e("a",{attrs:{href:"https://github.com/github/gitignore",target:"_blank",rel:"noopener noreferrer"}},[v._v("https://github.com/github/gitignore"),e("OutboundLink")],1),v._v(" 中进行查询。")]),v._v(" "),e("h2",{attrs:{id:"移除"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#移除"}},[v._v("#")]),v._v(" 移除")]),v._v(" "),e("h3",{attrs:{id:"删除文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#删除文件"}},[v._v("#")]),v._v(" 删除文件")]),v._v(" "),e("ol",[e("li",[e("p",[v._v("从当前目前中删除："),e("code",[v._v("git rm file")]),v._v("。等同于手动删除"),e("code",[v._v("rm file")]),v._v("后"),e("code",[v._v("git add .")]),v._v("。如果该文件已被放入暂存区，则需添加"),e("code",[v._v("-f")]),v._v("参数。")])]),v._v(" "),e("li",[e("p",[v._v("如果仅是想将文件从"),e("mark",[v._v("跟踪清单中移除")]),v._v("："),e("code",[v._v("git rm --cached file")]),v._v("。")])])]),v._v(" "),e("h3",{attrs:{id:"清理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#清理"}},[v._v("#")]),v._v(" 清理")]),v._v(" "),e("p",[v._v("清理由外部工具生成的东西。譬如，在进行构建前清理前一次构建残留下东西。")]),v._v(" "),e("ol",[e("li",[v._v("移除所有没有忽略的未跟踪文件："),e("code",[v._v("git clean")]),v._v("。加"),e("code",[v._v("-x")]),v._v("参数移除包含已被忽略的文件。")]),v._v(" "),e("li",[v._v("强制移除所有默认的文件以及空的子目录："),e("code",[v._v("git clean -f -d")]),v._v("。")])]),v._v(" "),e("blockquote",[e("p",[v._v("移除前可通过"),e("code",[v._v("-n")]),v._v("参数看看哪些会被移除。")])]),v._v(" "),e("h1",{attrs:{id:"进阶"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#进阶"}},[v._v("#")]),v._v(" 进阶")]),v._v(" "),e("h2",{attrs:{id:"重置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#重置"}},[v._v("#")]),v._v(" 重置")]),v._v(" "),e("p",[v._v("通过操作"),e("code",[v._v("HEAD")]),v._v("指针和三个数据区来实现"),e("strong",[v._v("回滚")]),v._v("操作。")]),v._v(" "),e("p",[v._v("重置回滚有三个程度，分别对应三个数据区。")]),v._v(" "),e("p",[e("strong",[v._v("1.")]),v._v(" 仅回滚"),e("strong",[v._v("git目录")]),v._v("："),e("code",[v._v("git reset --soft HEAD~")])]),v._v(" "),e("p",[v._v("将"),e("code",[v._v("HEAD")]),v._v("指针"),e("mark",[v._v("指向的分支")]),v._v("移动到指定的提交记录"),e("code",[v._v("HAED~")]),v._v("("),e("code",[v._v("HEAD")]),v._v("的父提交)，其他不做修改。此时仓库回滚到"),e("code",[v._v("git commit")]),v._v("之前的状态，因此修改文件后再度提交即可完成"),e("code",[v._v("git commit --amend")]),v._v("等同的操作。")]),v._v(" "),e("blockquote",[e("p",[v._v("提交记录的指定，可以是记录的"),e("code",[v._v("SHA-1")]),v._v("校验和的前几位，也可以是"),e("code",[v._v("HEAD~i")]),v._v("（HEAD倒数的第"),e("code",[v._v("i")]),v._v("个提交）。")])]),v._v(" "),e("p",[e("strong",[v._v("2.")]),v._v(" 回滚至"),e("strong",[v._v("暂存区")]),v._v("："),e("code",[v._v("git reset [--mixed] HEAD~")])]),v._v(" "),e("blockquote",[e("p",[e("strong",[v._v("reset")]),v._v(" 的默认操作，即不指定任何选项时。")])]),v._v(" "),e("p",[v._v("将"),e("code",[v._v("HEAD")]),v._v("指针"),e("mark",[v._v("指向的分支")]),v._v("移动到指定的提交记录，且将该记录覆盖暂存区。此时仓库回滚到"),e("code",[v._v("git commit")]),v._v("和"),e("code",[v._v("git add")]),v._v("之前的状态。")]),v._v(" "),e("p",[e("strong",[v._v("3.")]),v._v(" 回滚至"),e("strong",[v._v("工作区")]),v._v("："),e("code",[v._v("git reset --hard HEAD~")])]),v._v(" "),e("p",[v._v("将指定的提交覆盖暂存区及工作区，这会"),e("mark",[v._v("完全丢弃当前未提交的工作")]),v._v("。")]),v._v(" "),e("h3",{attrs:{id:"指定文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#指定文件"}},[v._v("#")]),v._v(" 指定文件")]),v._v(" "),e("p",[v._v("可以指定特定的文件回滚至暂存区，而不移动"),e("code",[v._v("HEAD")]),v._v("指针。")]),v._v(" "),e("p",[e("code",[v._v("git reset file.txt")]),v._v("将文件回滚至暂存区。（"),e("code",[v._v("git reset --mixed HEAD file.txt")]),v._v(" 的简写形式）撤销最后一次的"),e("code",[v._v("git add file.txt")]),v._v("。")]),v._v(" "),e("h2",{attrs:{id:"检出"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#检出"}},[v._v("#")]),v._v(" 检出")]),v._v(" "),e("p",[v._v("检出指定的提交记录，覆盖至工作区。与"),e("code",[v._v("git reset --hard")]),v._v("\n不同的是，"),e("code",[v._v("checkout")]),e("mark",[v._v("对工作区是安全")]),v._v("的，会试着将指定的提交"),e("strong",[v._v("合并")]),v._v("至当前工作区。")]),v._v(" "),e("p",[e("code",[v._v("reset")]),v._v(" 会移动 "),e("code",[v._v("HEAD")]),v._v(" 分支的指向，而 "),e("code",[v._v("checkout")]),v._v(" 则移动 "),e("code",[v._v("HEAD")]),v._v(" 自身。")]),v._v(" "),e("p",[e("img",{attrs:{src:t(1067),alt:"avatar"}}),e("br")]),v._v(" "),e("p",[e("code",[v._v("checkout")]),v._v("同样可以检出指定文件，通过"),e("code",[v._v("git checkout HEAD file.txt")]),v._v("。此时"),e("code",[v._v("HEAD")]),v._v("指针不移动，但指定的文件将"),e("strong",[v._v("强制")]),v._v("覆盖至工作区。")]),v._v(" "),e("h2",{attrs:{id:"贮藏"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#贮藏"}},[v._v("#")]),v._v(" 贮藏")]),v._v(" "),e("p",[v._v("将处于进行中的工作临时存储在一个栈中，需要时再拿出来。用于在多个分支同时工作的情况中。")]),v._v(" "),e("ol",[e("li",[e("p",[v._v("存储当前工作区的所有"),e("strong",[v._v("已跟踪")]),v._v("文件，并"),e("strong",[v._v("清空暂存区")]),v._v("："),e("code",[v._v("git stash")]),v._v("。")])]),v._v(" "),e("li",[e("p",[v._v("查看当前所有的贮藏："),e("code",[v._v("git stash list")]),v._v("。")])]),v._v(" "),e("li",[e("p",[v._v("应用最新的贮藏："),e("code",[v._v("git stash apply")]),v._v("；可以指定应用的贮藏："),e("code",[v._v("git stash apply stash@{2}")]),v._v("。")])]),v._v(" "),e("li",[e("p",[v._v("移除指定的贮藏："),e("code",[v._v("git stash drop stash@{0}")]),v._v("；或者直接应用并移除贮藏："),e("code",[v._v("git stash pop")]),v._v("。")])]),v._v(" "),e("li",[e("p",[v._v("直接应用贮藏并不会恢复原来的暂存区，需加上"),e("code",[v._v("--index")]),v._v("参数："),e("code",[v._v("git stash apply/pop --index")]),v._v("。")])]),v._v(" "),e("li",[e("p",[v._v("贮藏时不清空暂存区："),e("code",[v._v("git stash --keep-index")]),v._v("。")])]),v._v(" "),e("li",[e("p",[v._v("包含未跟踪文件，但不包含git忽略的：加上"),e("code",[v._v("--include-untracked")]),v._v("参数。包含所有："),e("code",[v._v("--all")]),v._v("。")])]),v._v(" "),e("li",[e("p",[v._v("从贮藏中创建分支，并移除贮藏："),e("code",[v._v("git stash <from-branch> <new-branch>")]),v._v("。")])])]),v._v(" "),e("h1",{attrs:{id:"ssh-传输设置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ssh-传输设置"}},[v._v("#")]),v._v(" SSH 传输设置")]),v._v(" "),e("p",[v._v("Git 仓库和 Github 中心仓库之间的传输是通过 SSH 加密。")]),v._v(" "),e("p",[v._v("如果工作区下没有 .ssh 目录，或者该目录下没有 id_rsa 和 id_rsa.pub 这两个文件，可以通过以下命令来创建 SSH Key：")]),v._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[v._v('$ ssh-keygen -t rsa -C "youremail@example.com"\n')])])]),e("p",[v._v('然后把公钥 id_rsa.pub 的内容复制到 Github "Account settings" 的 SSH Keys 中。')]),v._v(" "),e("h1",{attrs:{id:"命令一览"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#命令一览"}},[v._v("#")]),v._v(" 命令一览")]),v._v(" "),e("p",[e("img",{attrs:{src:t(1068),alt:"avatar"}}),e("br")]),v._v(" "),e("p",[v._v("比较详细的地址：http://www.cheat-sheets.org/saved-copy/git-cheat-sheet.pdf")]),v._v(" "),e("h1",{attrs:{id:"参考资料"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[v._v("#")]),v._v(" 参考资料")]),v._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"http://rogerdudler.github.io/git-guide/index.zh.html",target:"_blank",rel:"noopener noreferrer"}},[v._v("Git - 简明指南"),e("OutboundLink")],1)]),v._v(" "),e("li",[e("a",{attrs:{href:"http://marklodato.github.io/visual-git-guide/index-zh-cn.html",target:"_blank",rel:"noopener noreferrer"}},[v._v("图解 Git"),e("OutboundLink")],1)]),v._v(" "),e("li",[e("a",{attrs:{href:"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000",target:"_blank",rel:"noopener noreferrer"}},[v._v("廖雪峰 : Git 教程"),e("OutboundLink")],1)]),v._v(" "),e("li",[e("a",{attrs:{href:"https://learngitbranching.js.org/",target:"_blank",rel:"noopener noreferrer"}},[v._v("Learn Git Branching"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);_.default=a.exports}}]);