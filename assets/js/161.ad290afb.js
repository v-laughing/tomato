(window.webpackJsonp=window.webpackJsonp||[]).push([[161],{1071:function(t,a){t.exports="data:image/png;base64,"},1360:function(t,a,s){"use strict";s.r(a);var v=s(7),r=Object(v.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("ul",[v("li",[v("RouterLink",{attrs:{to:"/cs/tools/regular-expr.html#一概述"}},[t._v("一、概述")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/cs/tools/regular-expr.html#二匹配单个字符"}},[t._v("二、匹配单个字符")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/cs/tools/regular-expr.html#三匹配一组字符"}},[t._v("三、匹配一组字符")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/cs/tools/regular-expr.html#四使用元字符"}},[t._v("四、使用元字符")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/cs/tools/regular-expr.html#五重复匹配"}},[t._v("五、重复匹配")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/cs/tools/regular-expr.html#六位置匹配"}},[t._v("六、位置匹配")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/cs/tools/regular-expr.html#七使用子表达式"}},[t._v("七、使用子表达式")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/cs/tools/regular-expr.html#八回溯引用"}},[t._v("八、回溯引用")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/cs/tools/regular-expr.html#九前后查找"}},[t._v("九、前后查找")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/cs/tools/regular-expr.html#十嵌入条件"}},[t._v("十、嵌入条件")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/cs/tools/regular-expr.html#参考资料"}},[t._v("参考资料")])],1)]),t._v(" "),v("h1",{attrs:{id:"一、概述"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一、概述"}},[t._v("#")]),t._v(" 一、概述")]),t._v(" "),v("p",[t._v("正则表达式用于文本内容的查找和替换。")]),t._v(" "),v("p",[t._v("正则表达式内置于其它语言或者软件产品中，它本身不是一种语言或者软件。")]),t._v(" "),v("p",[v("a",{attrs:{href:"https://regexr.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("正则表达式在线工具"),v("OutboundLink")],1)]),t._v(" "),v("h1",{attrs:{id:"二、匹配单个字符"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二、匹配单个字符"}},[t._v("#")]),t._v(" 二、匹配单个字符")]),t._v(" "),v("p",[v("strong",[t._v(".")]),t._v("   可以用来匹配任何的单个字符，但是在绝大多数实现里面，不能匹配换行符；")]),t._v(" "),v("p",[v("strong",[t._v(".")]),t._v("   是元字符，表示它有特殊的含义，而不是字符本身的含义。如果需要匹配 . ，那么要用 \\ 进行转义，即在 . 前面加上 \\ 。")]),t._v(" "),v("p",[t._v("正则表达式一般是区分大小写的，但也有些实现不区分。")]),t._v(" "),v("p",[v("strong",[t._v("正则表达式")])]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("C.C2018\n")])])]),v("p",[v("strong",[t._v("匹配结果")])]),t._v(" "),v("p",[t._v("My name is   "),v("strong",[t._v("CyC2018")]),t._v("  .")]),t._v(" "),v("h1",{attrs:{id:"三、匹配一组字符"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#三、匹配一组字符"}},[t._v("#")]),t._v(" 三、匹配一组字符")]),t._v(" "),v("p",[v("strong",[t._v("[ ]")]),t._v("   定义一个字符集合；")]),t._v(" "),v("p",[t._v("0-9、a-z 定义了一个字符区间，区间使用 ASCII 码来确定，字符区间在 [ ] 中使用。")]),t._v(" "),v("p",[v("strong",[t._v("-")]),t._v("   只有在 [ ] 之间才是元字符，在 [ ] 之外就是一个普通字符；")]),t._v(" "),v("p",[v("strong",[t._v("^")]),t._v("   在 [ ] 中是取非操作。")]),t._v(" "),v("p",[v("strong",[t._v("应用")])]),t._v(" "),v("p",[t._v("匹配以 abc 为开头，并且最后一个字母不为数字的字符串：")]),t._v(" "),v("p",[v("strong",[t._v("正则表达式")])]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("abc[^0-9]\n")])])]),v("p",[v("strong",[t._v("匹配结果")])]),t._v(" "),v("ol",[v("li",[v("strong",[t._v("abcd")])]),t._v(" "),v("li",[t._v("abc1")]),t._v(" "),v("li",[t._v("abc2")])]),t._v(" "),v("h1",{attrs:{id:"四、使用元字符"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#四、使用元字符"}},[t._v("#")]),t._v(" 四、使用元字符")]),t._v(" "),v("h2",{attrs:{id:"匹配空白字符"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#匹配空白字符"}},[t._v("#")]),t._v(" 匹配空白字符")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",{staticStyle:{"text-align":"center"}},[t._v("元字符")]),t._v(" "),v("th",{staticStyle:{"text-align":"center"}},[t._v("说明")])])]),t._v(" "),v("tbody",[v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("[\\b]")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("回退（删除）一个字符")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("\\f")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("换页符")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("\\n")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("换行符")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("\\r")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("回车符")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("\\t")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("制表符")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("\\v")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("垂直制表符")])])])]),t._v(" "),v("p",[t._v("\\r\\n 是 Windows 中的文本行结束标签，在 Unix/Linux 则是 \\n。")]),t._v(" "),v("p",[t._v("\\r\\n\\r\\n 可以匹配 Windows 下的空白行，因为它匹配两个连续的行尾标签，而这正是两条记录之间的空白行；")]),t._v(" "),v("h2",{attrs:{id:"匹配特定的字符"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#匹配特定的字符"}},[t._v("#")]),t._v(" 匹配特定的字符")]),t._v(" "),v("h3",{attrs:{id:"_1-数字元字符"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-数字元字符"}},[t._v("#")]),t._v(" 1. 数字元字符")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",{staticStyle:{"text-align":"center"}},[t._v("元字符")]),t._v(" "),v("th",{staticStyle:{"text-align":"center"}},[t._v("说明")])])]),t._v(" "),v("tbody",[v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("\\d")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("数字字符，等价于 [0-9]")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("\\D")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("非数字字符，等价于 [^0-9]")])])])]),t._v(" "),v("h3",{attrs:{id:"_2-字母数字元字符"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-字母数字元字符"}},[t._v("#")]),t._v(" 2. 字母数字元字符")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",{staticStyle:{"text-align":"center"}},[t._v("元字符")]),t._v(" "),v("th",{staticStyle:{"text-align":"center"}},[t._v("说明")])])]),t._v(" "),v("tbody",[v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("\\w")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("大小写字母，下划线和数字，等价于 [a-zA-Z0-9_]")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("\\W")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("对 \\w 取非")])])])]),t._v(" "),v("h3",{attrs:{id:"_3-空白字符元字符"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-空白字符元字符"}},[t._v("#")]),t._v(" 3. 空白字符元字符")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",{staticStyle:{"text-align":"center"}},[t._v("元字符")]),t._v(" "),v("th",{staticStyle:{"text-align":"center"}},[t._v("说明")])])]),t._v(" "),v("tbody",[v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("\\s")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("任何一个空白字符，等价于 [\\f\\n\\r\\t\\v]")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("\\S")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("对 \\s 取非")])])])]),t._v(" "),v("p",[t._v("\\x 匹配十六进制字符，\\0 匹配八进制，例如 \\xA 对应值为 10 的 ASCII 字符 ，即 \\n。")]),t._v(" "),v("h1",{attrs:{id:"五、重复匹配"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#五、重复匹配"}},[t._v("#")]),t._v(" 五、重复匹配")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("+")]),t._v("   匹配 1 个或者多个字符")]),t._v(" "),v("li",[v("strong",[t._v("*")]),t._v(" 匹配 0 个或者多个字符")]),t._v(" "),v("li",[v("strong",[t._v("?")]),t._v("   匹配 0 个或者 1 个字符")])]),t._v(" "),v("p",[v("strong",[t._v("应用")])]),t._v(" "),v("p",[t._v("匹配邮箱地址。")]),t._v(" "),v("p",[v("strong",[t._v("正则表达式")])]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("[\\w.]+@\\w+\\.\\w+\n")])])]),v("p",[t._v("[\\w.] 匹配的是字母数字或者 . ，在其后面加上 + ，表示匹配多次。在字符集合 [ ] 里，. 不是元字符；")]),t._v(" "),v("p",[v("strong",[t._v("匹配结果")])]),t._v(" "),v("p",[v("strong",[t._v("abc.def"),v("span",[t._v("@")]),t._v("qq.com")])]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("{n}")]),t._v("   匹配 n 个字符")]),t._v(" "),v("li",[v("strong",[t._v("{m,n}")]),t._v("   匹配 m~n 个字符")]),t._v(" "),v("li",[v("strong",[t._v("{m,}")]),t._v("   至少匹配 m 个字符")])]),t._v(" "),v("p",[t._v("* 和 + 都是"),v("mark",[t._v("贪婪型元字符")]),t._v("，会匹配尽可能多的内容。在后面加 ? 可以转换为懒惰型元字符，例如 *?、+? 和 {m,n}? 。")]),t._v(" "),v("p",[v("strong",[t._v("正则表达式")])]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("a.+c\n")])])]),v("p",[v("strong",[t._v("匹配结果")])]),t._v(" "),v("p",[v("strong",[t._v("abcabcabc")])]),t._v(" "),v("p",[t._v("由于 + 是贪婪型的，因此 .+ 会匹配更可能多的内容，所以会把整个 abcabcabc 文本都匹配，而不是只匹配前面的 abc 文本。用懒惰型可以实现匹配前面的。")]),t._v(" "),v("h1",{attrs:{id:"六、位置匹配"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#六、位置匹配"}},[t._v("#")]),t._v(" 六、位置匹配")]),t._v(" "),v("h2",{attrs:{id:"单词边界"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#单词边界"}},[t._v("#")]),t._v(" 单词边界")]),t._v(" "),v("p",[v("strong",[t._v("\\b")]),t._v("   可以匹配一个单词的边界，边界是指位于 \\w 和 \\W 之间的位置；"),v("strong",[t._v("\\B")]),t._v(" 匹配一个不是单词边界的位置。")]),t._v(" "),v("p",[t._v("\\b 只匹配位置，不匹配字符，因此 \\babc\\b 匹配出来的结果为 3 个字符。")]),t._v(" "),v("h2",{attrs:{id:"字符串边界"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#字符串边界"}},[t._v("#")]),t._v(" 字符串边界")]),t._v(" "),v("p",[v("strong",[t._v("^")]),t._v("   匹配"),v("mark",[t._v("整个字符串")]),t._v("的开头，"),v("strong",[t._v("$")]),t._v(" 匹配结尾。")]),t._v(" "),v("p",[t._v("^ 元字符在字符集合中用作求非，在字符集合外用作匹配字符串的开头。")]),t._v(" "),v("p",[t._v("分行匹配模式（multiline）下，换行被当做字符串的边界。")]),t._v(" "),v("p",[v("strong",[t._v("应用")])]),t._v(" "),v("p",[t._v("匹配代码中以 // 开始的注释行")]),t._v(" "),v("p",[v("strong",[t._v("正则表达式")])]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("^\\s*\\/\\/.*$\n")])])]),v("p",[v("img",{attrs:{src:s(1071),alt:"avatar"}}),v("br")]),t._v(" "),v("p",[v("strong",[t._v("匹配结果")])]),t._v(" "),v("ol",[v("li",[t._v("public void fun() {")]),t._v(" "),v("li",[v("strong",[t._v("// 注释 1")])]),t._v(" "),v("li",[t._v("        int a = 1;")]),t._v(" "),v("li",[t._v("        int b = 2;")]),t._v(" "),v("li",[v("strong",[t._v("// 注释 2")])]),t._v(" "),v("li",[t._v("        int c = a + b;")]),t._v(" "),v("li",[t._v("}")])]),t._v(" "),v("h1",{attrs:{id:"七、使用子表达式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#七、使用子表达式"}},[t._v("#")]),t._v(" 七、使用子表达式")]),t._v(" "),v("p",[t._v("使用   "),v("strong",[t._v("( )")]),t._v("   定义一个子表达式。子表达式的内容可以当成一个独立元素，即可以将它看成一个字符，并且使用 * 等元字符。")]),t._v(" "),v("p",[t._v("子表达式可以嵌套，但是嵌套层次过深会变得很难理解。")]),t._v(" "),v("p",[v("strong",[t._v("正则表达式")])]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("(ab){2,}\n")])])]),v("p",[v("strong",[t._v("匹配结果")])]),t._v(" "),v("p",[v("strong",[t._v("ababab")])]),t._v(" "),v("p",[v("strong",[t._v("|")]),t._v("   是或元字符，它把左边和右边所有的部分都看成单独的两个部分，两个部分只要有一个匹配就行。")]),t._v(" "),v("p",[v("strong",[t._v("正则表达式")])]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("(19|20)\\d{2}\n")])])]),v("p",[v("strong",[t._v("匹配结果")])]),t._v(" "),v("ol",[v("li",[v("strong",[t._v("1900")])]),t._v(" "),v("li",[v("strong",[t._v("2010")])]),t._v(" "),v("li",[t._v("1020")])]),t._v(" "),v("p",[v("strong",[t._v("应用")])]),t._v(" "),v("p",[t._v("匹配 IP 地址。")]),t._v(" "),v("p",[t._v("IP 地址中每部分都是 0-255 的数字，用正则表达式匹配时以下情况是合法的：")]),t._v(" "),v("ul",[v("li",[t._v("一位数字")]),t._v(" "),v("li",[t._v("不以 0 开头的两位数字")]),t._v(" "),v("li",[t._v("1 开头的三位数")]),t._v(" "),v("li",[t._v("2 开头，第 2 位是 0-4 的三位数")]),t._v(" "),v("li",[t._v("25 开头，第 3 位是 0-5 的三位数")])]),t._v(" "),v("p",[v("strong",[t._v("正则表达式")])]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("((25[0-5]|(2[0-4]\\d)|(1\\d{2})|([1-9]\\d)|(\\d))\\.){3}(25[0-5]|(2[0-4]\\d)|(1\\d{2})|([1-9]\\d)|(\\d))\n")])])]),v("p",[v("strong",[t._v("匹配结果")])]),t._v(" "),v("ol",[v("li",[v("strong",[t._v("192.168.0.1")])]),t._v(" "),v("li",[t._v("00.00.00.00")]),t._v(" "),v("li",[t._v("555.555.555.555")])]),t._v(" "),v("h1",{attrs:{id:"八、回溯引用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#八、回溯引用"}},[t._v("#")]),t._v(" 八、回溯引用")]),t._v(" "),v("p",[t._v("回溯引用使用   "),v("strong",[t._v("\\n")]),t._v("   来"),v("mark",[t._v("引用某个子表达式")]),t._v("，其中 n 代表的是子表达式的序号，从 1 开始。它和子表达式匹配的内容一致，比如子表达式匹配到 abc，那么回溯引用部分也需要匹配 abc 。")]),t._v(" "),v("p",[v("strong",[t._v("应用")])]),t._v(" "),v("p",[t._v("匹配 HTML 中合法的标题元素。")]),t._v(" "),v("p",[v("strong",[t._v("正则表达式")])]),t._v(" "),v("p",[t._v("\\1 将回溯引用子表达式 (h[1-6]) 匹配的内容，也就是说必须和子表达式匹配的内容一致。")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("<(h[1-6])>\\w*?<\\/\\1>\n")])])]),v("p",[v("strong",[t._v("匹配结果")])]),t._v(" "),v("ol",[v("li",[v("strong",[t._v("<h1>x</h1>")])]),t._v(" "),v("li",[v("strong",[t._v("<h2>x</h2>")])]),t._v(" "),v("li",[t._v("<h3>x</h1>")])]),t._v(" "),v("h2",{attrs:{id:"替换"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#替换"}},[t._v("#")]),t._v(" 替换")]),t._v(" "),v("p",[t._v("需要用到两个正则表达式。")]),t._v(" "),v("p",[v("strong",[t._v("应用")])]),t._v(" "),v("p",[t._v("修改电话号码格式。")]),t._v(" "),v("p",[v("strong",[t._v("文本")])]),t._v(" "),v("p",[t._v("313-555-1234")]),t._v(" "),v("p",[v("strong",[t._v("查找正则表达式")])]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("(\\d{3})(-)(\\d{3})(-)(\\d{4})\n")])])]),v("p",[v("strong",[t._v("替换正则表达式")])]),t._v(" "),v("p",[t._v("在第一个子表达式查找的结果加上 () ，然后加一个空格，在第三个和第五个字表达式查找的结果中间加上 - 进行分隔。")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("($1) $3-$5\n")])])]),v("p",[v("strong",[t._v("结果")])]),t._v(" "),v("p",[t._v("(313) 555-1234")]),t._v(" "),v("h2",{attrs:{id:"大小写转换"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#大小写转换"}},[t._v("#")]),t._v(" 大小写转换")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",{staticStyle:{"text-align":"center"}},[t._v("元字符")]),t._v(" "),v("th",{staticStyle:{"text-align":"center"}},[t._v("说明")])])]),t._v(" "),v("tbody",[v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("\\l")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("把下个字符转换为小写")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("\\u")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("把下个字符转换为大写")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("\\L")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("把\\L 和\\E 之间的字符全部转换为小写")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("\\U")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("把\\U 和\\E 之间的字符全部转换为大写")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("\\E")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("结束\\L 或者\\U")])])])]),t._v(" "),v("p",[v("strong",[t._v("应用")])]),t._v(" "),v("p",[t._v("把文本的第二个和第三个字符转换为大写。")]),t._v(" "),v("p",[v("strong",[t._v("文本")])]),t._v(" "),v("p",[t._v("abcd")]),t._v(" "),v("p",[v("strong",[t._v("查找")])]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("(\\w)(\\w{2})(\\w)\n")])])]),v("p",[v("strong",[t._v("替换")])]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("$1\\U$2\\E$3\n")])])]),v("p",[v("strong",[t._v("结果")])]),t._v(" "),v("p",[t._v("aBCd")]),t._v(" "),v("h1",{attrs:{id:"九、前后查找"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#九、前后查找"}},[t._v("#")]),t._v(" 九、前后查找")]),t._v(" "),v("p",[t._v("前后查找规定了匹配的内容首尾应该匹配的内容，但是又不包含首尾匹配的内容。")]),t._v(" "),v("p",[v("mark",[t._v("向前查找")]),t._v("使用   "),v("strong",[t._v("?=")]),t._v("   定义，它规定了尾部匹配的内容，这个匹配的内容在 ?= 之后定义。所谓向前查找，就是规定了一个匹配的内容，然后以这个内容为尾部向前面查找需要匹配的内容。向后匹配用 ?<= 定义（注: JavaScript 不支持向后匹配，Java 对其支持也不完善）。")]),t._v(" "),v("p",[v("strong",[t._v("应用")])]),t._v(" "),v("p",[t._v("查找出邮件地址 @ 字符前面的部分。")]),t._v(" "),v("p",[v("strong",[t._v("正则表达式")])]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("\\w+(?=@)\n")])])]),v("p",[v("strong",[t._v("结果")])]),t._v(" "),v("p",[v("strong",[t._v("abc")]),t._v("  @qq.com")]),t._v(" "),v("p",[t._v("对向前和向后查找"),v("mark",[t._v("取非")]),t._v("，只要把 = 替换成 ! 即可，比如 (?=) 替换成 (?!) 。取非操作使得匹配那些首尾不符合要求的内容。")]),t._v(" "),v("h1",{attrs:{id:"十、嵌入条件"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#十、嵌入条件"}},[t._v("#")]),t._v(" 十、嵌入条件")]),t._v(" "),v("h2",{attrs:{id:"回溯引用条件"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#回溯引用条件"}},[t._v("#")]),t._v(" 回溯引用条件")]),t._v(" "),v("p",[t._v("条件为某个子表达式是否匹配，如果匹配则需要继续匹配条件表达式后面的内容。")]),t._v(" "),v("p",[v("strong",[t._v("正则表达式")])]),t._v(" "),v("p",[t._v("子表达式 (\\() 匹配一个左括号，其后的 ? 表示匹配 0 个或者 1 个。 ?(1) 为条件，当子表达式 1 匹配时条件成立，需要执行 ) 匹配，也就是匹配右括号。")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("(\\()?abc(?(1)\\))\n")])])]),v("p",[v("strong",[t._v("结果")])]),t._v(" "),v("ol",[v("li",[v("strong",[t._v("(abc)")])]),t._v(" "),v("li",[v("strong",[t._v("abc")])]),t._v(" "),v("li",[t._v("(abc")])]),t._v(" "),v("h2",{attrs:{id:"前后查找条件"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#前后查找条件"}},[t._v("#")]),t._v(" 前后查找条件")]),t._v(" "),v("p",[t._v("条件为定义的首尾是否匹配，如果匹配，则继续执行后面的匹配。注意，首尾不包含在匹配的内容中。")]),t._v(" "),v("p",[v("strong",[t._v("正则表达式")])]),t._v(" "),v("p",[t._v("?(?=-) 为前向查找条件，只有在以 - 为前向查找的结尾能匹配 \\d{5} ，才继续匹配 -\\d{4} 。")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("\\d{5}(?(?=-)-\\d{4})\n")])])]),v("p",[v("strong",[t._v("结果")])]),t._v(" "),v("ol",[v("li",[v("strong",[t._v("11111")])]),t._v(" "),v("li",[t._v("22222-")]),t._v(" "),v("li",[v("strong",[t._v("33333-4444")])])]),t._v(" "),v("h1",{attrs:{id:"python示例"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#python示例"}},[t._v("#")]),t._v(" Python示例")]),t._v(" "),v("h2",{attrs:{id:"匹配一次"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#匹配一次"}},[t._v("#")]),t._v(" 匹配一次")]),t._v(" "),v("p",[v("strong",[t._v("从头匹配")]),t._v(" "),v("code",[t._v("re.match(pattern, string, flags=0)-> re.MatchObject")])]),t._v(" "),v("p",[t._v("从字符串的起始位置匹配一个模式。匹配失败，match()就返回none。\n通过"),v("code",[t._v("MathchObject")]),t._v("的"),v("code",[t._v("group(num)")]),t._v(" 或 "),v("code",[t._v("groups()")]),t._v(" 方法来获取匹配表达式。")]),t._v(" "),v("div",{staticClass:"language-python extra-class"},[v("pre",{pre:!0,attrs:{class:"language-python"}},[v("code",[v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" re\n\nline "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Cats are smarter than dogs"')]),t._v("\nmatchObj "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" re"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("match"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("r'(.*) are (.*?) .*'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" line"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" re"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("M"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("re"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("I"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" matchObj"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n   "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("matchObj"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("group"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Cats are smarter than dogs")]),t._v("\n   "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("matchObj"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("group"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Cats")]),t._v("\n   "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("matchObj"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("group"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# smarter")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n   "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"No match!!"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),v("p",[v("strong",[t._v("任意位置匹配")]),t._v(" "),v("code",[t._v("re.search(pattern, string, flags=0)-> re.MatchObject")])]),t._v(" "),v("p",[t._v("扫描整个字符串并返回第一个成功的匹配。")]),t._v(" "),v("h2",{attrs:{id:"匹配所有"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#匹配所有"}},[t._v("#")]),t._v(" 匹配所有")]),t._v(" "),v("p",[v("code",[t._v("re.findall(pattern, string, flags=0)->[str]")])]),t._v(" "),v("p",[t._v("字符串中找到正则表达式所匹配的所有子串，并返回一个列表。")]),t._v(" "),v("div",{staticClass:"language-python extra-class"},[v("pre",{pre:!0,attrs:{class:"language-python"}},[v("code",[t._v("re"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("findall"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("r'\\d+'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'runoob 123 google 456'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ['123', '456']")]),t._v("\n")])])]),v("p",[v("code",[t._v("re.finditer")]),t._v("返回一个迭代器。")]),t._v(" "),v("h2",{attrs:{id:"其他"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[t._v("#")]),t._v(" 其他")]),t._v(" "),v("p",[v("code",[t._v("re.split")]),t._v("：按匹配模式将字符串分割后返回列表")]),t._v(" "),v("p",[v("code",[t._v("re.sub")]),t._v("：替换字符串")]),t._v(" "),v("div",{staticClass:"language-python extra-class"},[v("pre",{pre:!0,attrs:{class:"language-python"}},[v("code",[t._v("re"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("split"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\W+'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'runoob, runoob, runoob.'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#['runoob', 'runoob', 'runoob', '']")]),t._v("\n\nre"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sub"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("r'\\D'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2004-959-559"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2004959559")]),t._v("\n")])])]),v("h1",{attrs:{id:"参考资料"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),v("ul",[v("li",[t._v("BenForta. 正则表达式必知必会 [M]. 人民邮电出版社, 2007.")])])])}),[],!1,null,null,null);a.default=r.exports}}]);