(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{1292:function(t,s,a){"use strict";a.r(s);var n=a(7),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("ul",[n("li",[n("RouterLink",{attrs:{to:"/cs/network/Socket.html#一io-模型"}},[t._v("一、I/O 模型")]),t._v(" "),n("ul",[n("li",[n("RouterLink",{attrs:{to:"/cs/network/Socket.html#阻塞式-io"}},[t._v("阻塞式 I/O")])],1),t._v(" "),n("li",[n("RouterLink",{attrs:{to:"/cs/network/Socket.html#非阻塞式-io"}},[t._v("非阻塞式 I/O")])],1),t._v(" "),n("li",[n("RouterLink",{attrs:{to:"/cs/network/Socket.html#io-复用"}},[t._v("I/O 复用")])],1),t._v(" "),n("li",[n("RouterLink",{attrs:{to:"/cs/network/Socket.html#信号驱动-io"}},[t._v("信号驱动 I/O")])],1),t._v(" "),n("li",[n("RouterLink",{attrs:{to:"/cs/network/Socket.html#异步-io"}},[t._v("异步 I/O")])],1),t._v(" "),n("li",[n("RouterLink",{attrs:{to:"/cs/network/Socket.html#五大-io-模型比较"}},[t._v("五大 I/O 模型比较")])],1)])],1),t._v(" "),n("li",[n("RouterLink",{attrs:{to:"/cs/network/Socket.html#二io-复用"}},[t._v("二、I/O 复用")]),t._v(" "),n("ul",[n("li",[n("RouterLink",{attrs:{to:"/cs/network/Socket.html#select"}},[t._v("select")])],1),t._v(" "),n("li",[n("RouterLink",{attrs:{to:"/cs/network/Socket.html#poll"}},[t._v("poll")])],1),t._v(" "),n("li",[n("RouterLink",{attrs:{to:"/cs/network/Socket.html#比较"}},[t._v("比较")])],1),t._v(" "),n("li",[n("RouterLink",{attrs:{to:"/cs/network/Socket.html#epoll"}},[t._v("epoll")])],1),t._v(" "),n("li",[n("RouterLink",{attrs:{to:"/cs/network/Socket.html#工作模式"}},[t._v("工作模式")])],1),t._v(" "),n("li",[n("RouterLink",{attrs:{to:"/cs/network/Socket.html#应用场景"}},[t._v("应用场景")])],1)])],1),t._v(" "),n("li",[n("RouterLink",{attrs:{to:"/cs/network/Socket.html#参考资料"}},[t._v("参考资料")])],1)]),t._v(" "),n("h1",{attrs:{id:"概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),n("p",[t._v("Linux环境下的network IO。Socket，即套接字，是支持TCP/IP协议的网络通信的基本操作单元。它是"),n("mark",[t._v("网络通信过程中端点的抽象表示")]),t._v("。")]),t._v(" "),n("p",[t._v("创建Socket连接时，可以指定使用的传输层协议。")]),t._v(" "),n("h1",{attrs:{id:"一、i-o-模型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、i-o-模型"}},[t._v("#")]),t._v(" 一、I/O 模型")]),t._v(" "),n("p",[t._v("一个输入操作通常包括两个阶段：")]),t._v(" "),n("ul",[n("li",[t._v("等待数据准备好")]),t._v(" "),n("li",[t._v("从内核向进程复制数据")])]),t._v(" "),n("p",[t._v("对于一个套接字上的输入操作，第一步通常涉及等待数据从网络中到达。当所等待数据到达时，它被复制到内核中的某个缓冲区。第二步就是把数据从内核缓冲区复制到应用进程缓冲区（"),n("strong",[t._v("缓存 I/O")]),t._v("）。")]),t._v(" "),n("p",[t._v("Unix 有五种 I/O 模型：")]),t._v(" "),n("ul",[n("li",[t._v("阻塞式 I/O")]),t._v(" "),n("li",[t._v("非阻塞式 I/O")]),t._v(" "),n("li",[t._v("I/O 复用（select 和 poll）")]),t._v(" "),n("li",[t._v("信号驱动式 I/O（SIGIO）")]),t._v(" "),n("li",[t._v("异步 I/O（AIO）")])]),t._v(" "),n("h2",{attrs:{id:"阻塞式-i-o"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#阻塞式-i-o"}},[t._v("#")]),t._v(" 阻塞式 I/O")]),t._v(" "),n("p",[n("mark",[t._v("应用进程被阻塞")]),t._v("，直到数据从内核缓冲区复制到应用进程缓冲区中才返回。")]),t._v(" "),n("p",[t._v("应该注意到，在阻塞的过程中，其它应用进程还可以执行，因此阻塞不意味着整个操作系统都被阻塞。因为其它应用进程还可以执行，所以"),n("mark",[t._v("不消耗 CPU 时间")]),t._v("，这种模型的 CPU 利用率会比较高。")]),t._v(" "),n("p",[t._v("下图中，recvfrom() 用于接收 Socket 传来的数据，并复制到应用进程的缓冲区 buf 中。这里把 recvfrom() 当成系统调用。")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ssize_t")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("recvfrom")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sockfd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("buf"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" len"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" flags"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sockaddr")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("src_addr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("socklen_t")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("addrlen"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[n("img",{attrs:{src:a(982),alt:"avatar"}}),n("br")]),t._v(" "),n("h2",{attrs:{id:"非阻塞式-i-o"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#非阻塞式-i-o"}},[t._v("#")]),t._v(" 非阻塞式 I/O")]),t._v(" "),n("p",[t._v("应用进程执行系统调用之后，内核返回一个错误码。应用进程可以继续执行，但是需要不断的执行系统调用来获知 I/O 是否完成，这种方式称为"),n("mark",[t._v("轮询")]),t._v("（polling）。")]),t._v(" "),n("p",[t._v("由于 CPU 要处理更多的系统调用，因此这种模型的 CPU 利用率比较低。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(983),alt:"avatar"}}),n("br")]),t._v(" "),n("h2",{attrs:{id:"i-o-复用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#i-o-复用"}},[t._v("#")]),t._v(" I/O 复用")]),t._v(" "),n("p",[t._v("使用 select 或者 poll 等待数据，可以"),n("mark",[t._v("等待多个套接字")]),t._v("，直到其中的任何一个变为可读。这一过程会被阻塞，当某一个套接字可读时返回，之后再使用 recvfrom 把数据从内核复制到进程中。")]),t._v(" "),n("p",[t._v("它可以让"),n("mark",[t._v("单个进程具有处理多个 I/O 事件")]),t._v("的能力。又被称为 Event Driven I/O，即事件驱动 I/O。")]),t._v(" "),n("p",[t._v("如果一个 Web 服务器没有 I/O 复用，那么每一个 Socket 连接都需要创建一个线程去处理。如果同时有几万个连接，那么就需要创建相同数量的线程。相比于多进程和多线程技术，I/O 复用"),n("mark",[t._v("不需要进程线程创建和切换的开销")]),t._v("，系统开销更小。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(984),alt:"avatar"}}),n("br")]),t._v(" "),n("h2",{attrs:{id:"信号驱动-i-o"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#信号驱动-i-o"}},[t._v("#")]),t._v(" 信号驱动 I/O")]),t._v(" "),n("p",[t._v("应用进程使用 sigaction 系统调用，内核立即返回，应用进程可以继续执行，也就是说等待数据阶段应用进程是非阻塞的。内核在数据到达时向应用进程发送 SIGIO 信号，应用进程收到之后在信号处理程序中调用 recvfrom 将数据从内核复制到应用进程中。")]),t._v(" "),n("p",[t._v("相比于非阻塞式 I/O 的轮询方式，信号驱动 I/O 的 CPU 利用率更高。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(985),alt:"avatar"}}),n("br")]),t._v(" "),n("h2",{attrs:{id:"异步-i-o"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#异步-i-o"}},[t._v("#")]),t._v(" 异步 I/O")]),t._v(" "),n("p",[t._v("应用进程执行 aio_read 系统调用会立即返回，应用进程可以继续执行，不会被阻塞。内核会在所有操作完成之后向应用进程发送信号。")]),t._v(" "),n("p",[t._v("异步 I/O 与信号驱动 I/O 的区别在于，异步 I/O 的信号是通知应用进程 I/O 完成，而信号驱动 I/O 的信号是通知应用进程可以开始 I/O。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(986),alt:"avatar"}}),n("br")]),t._v(" "),n("h2",{attrs:{id:"五大-i-o-模型比较"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#五大-i-o-模型比较"}},[t._v("#")]),t._v(" 五大 I/O 模型比较")]),t._v(" "),n("ul",[n("li",[t._v("同步 I/O：将数据从内核缓冲区复制到应用进程缓冲区的阶段（第二阶段），应用进程会阻塞。")]),t._v(" "),n("li",[t._v("异步 I/O：第二阶段应用进程不会阻塞。")])]),t._v(" "),n("p",[t._v("同步 I/O 包括阻塞式 I/O、非阻塞式 I/O、I/O 复用和信号驱动 I/O ，它们的主要区别在第一个阶段。")]),t._v(" "),n("p",[t._v("非阻塞式 I/O 、信号驱动 I/O 和异步 I/O 在第一阶段不会阻塞。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(987),alt:"avatar"}}),n("br")]),t._v(" "),n("h1",{attrs:{id:"二、i-o-复用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、i-o-复用"}},[t._v("#")]),t._v(" 二、I/O 复用")]),t._v(" "),n("p",[t._v("select/poll/epoll 都是 I/O 多路复用的具体实现，select 出现的最早，之后是 poll，再是 epoll。")]),t._v(" "),n("h2",{attrs:{id:"select"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#select"}},[t._v("#")]),t._v(" select")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("select")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fd_set "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("readfds"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fd_set "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("writefds"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fd_set "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("exceptfds"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("timeval")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("timeout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("select 允许应用程序监视一组文件描述符，等待一个或者多个描述符成为就绪状态，从而完成 I/O 操作。")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("fd_set 使用数组实现，数组大小使用 FD_SETSIZE 定义，所以只能监听少于 FD_SETSIZE 数量的描述符。有三种类型的描述符类型：readset、writeset、exceptset，分别对应读、写、异常条件的描述符集合。")])]),t._v(" "),n("li",[n("p",[t._v("timeout 为超时参数，调用 select 会一直阻塞直到有描述符的事件到达或者等待的时间超过 timeout。")])]),t._v(" "),n("li",[n("p",[t._v("成功调用返回结果大于 0，出错返回结果为 -1，超时返回结果为 0。")])])]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[t._v("fd_set fd_in"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fd_out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("timeval")]),t._v(" tv"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Reset the sets")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("FD_ZERO")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("fd_in "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("FD_ZERO")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("fd_out "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Monitor sock1 for input events")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("FD_SET")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" sock1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("fd_in "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Monitor sock2 for output events")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("FD_SET")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" sock2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("fd_out "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Find out which socket has the largest numeric value as select requires it")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" largest_sock "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sock1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" sock2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" sock1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" sock2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Wait up to 10 seconds")]),t._v("\ntv"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tv_sec "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ntv"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tv_usec "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Call the select")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" ret "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("select")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" largest_sock "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("fd_in"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("fd_out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("tv "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Check if select actually succeed")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" ret "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// report error and abort")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" ret "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// timeout; no event detected")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("FD_ISSET")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" sock1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("fd_in "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// input event on sock1")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("FD_ISSET")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" sock2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("fd_out "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// output event on sock2")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h2",{attrs:{id:"poll"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#poll"}},[t._v("#")]),t._v(" poll")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("poll")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pollfd")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("fds"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" nfds"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" timeout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("poll 的功能与 select 类似，也是等待一组描述符中的一个成为就绪状态。")]),t._v(" "),n("p",[t._v("poll 中的描述符是 pollfd 类型的数组，pollfd 的定义如下：")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pollfd")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n               "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v("   fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("         "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* file descriptor */")]),t._v("\n               "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),t._v(" events"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* requested events */")]),t._v("\n               "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),t._v(" revents"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* returned events */")]),t._v("\n           "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The structure for two events")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pollfd")]),t._v(" fds"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Monitor sock1 for input")]),t._v("\nfds"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fd "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sock1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfds"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("events "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" POLLIN"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Monitor sock2 for output")]),t._v("\nfds"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fd "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sock2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfds"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("events "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" POLLOUT"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Wait 10 seconds")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" ret "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("poll")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("fds"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Check if poll actually succeed")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" ret "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// report error and abort")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" ret "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// timeout; no event detected")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If we detect the event, zero it out so we can reuse the structure")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" fds"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("revents "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" POLLIN "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        fds"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("revents "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// input event on sock1")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" fds"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("revents "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" POLLOUT "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        fds"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("revents "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// output event on sock2")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h2",{attrs:{id:"比较"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#比较"}},[t._v("#")]),t._v(" 比较")]),t._v(" "),n("h3",{attrs:{id:"_1-功能"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-功能"}},[t._v("#")]),t._v(" 1. 功能")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\tselect"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("streams"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在这里阻塞")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" streams"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 轮询，查找某个可操作的描述符（流）")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" i has data\n\t\t\tread until unavailable\n")])])]),n("p",[t._v("select 和 poll 的功能基本相同，不过在一些实现细节上有所不同。")]),t._v(" "),n("ul",[n("li",[t._v("select 会修改描述符，而 poll 不会；")]),t._v(" "),n("li",[t._v("select 的描述符类型使用数组实现，FD_SETSIZE 大小默认为 1024，因此默认只能监听少于 1024 个描述符。如果要监听更多描述符的话，需要修改 FD_SETSIZE 之后重新编译；而 poll 没有描述符数量的限制；")]),t._v(" "),n("li",[t._v("poll 提供了更多的事件类型，并且对描述符的重复利用上比 select 高。")]),t._v(" "),n("li",[t._v("如果一个线程对某个描述符调用了 select 或者 poll，另一个线程关闭了该描述符，会导致调用结果不确定。")])]),t._v(" "),n("h3",{attrs:{id:"_2-速度"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-速度"}},[t._v("#")]),t._v(" 2. 速度")]),t._v(" "),n("p",[t._v("select 和 poll 速度都比较慢，每次调用都需要将全部描述符从应用进程缓冲区复制到内核缓冲区，并且select和poll在返回后，需要通过"),n("mark",[t._v("遍历文件描述符来获取已经就绪的socket")]),t._v("。")]),t._v(" "),n("h3",{attrs:{id:"_3-可移植性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-可移植性"}},[t._v("#")]),t._v(" 3. 可移植性")]),t._v(" "),n("p",[t._v("几乎所有的系统都支持 select，但是只有比较新的系统支持 poll。")]),t._v(" "),n("h2",{attrs:{id:"epoll"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#epoll"}},[t._v("#")]),t._v(" epoll")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("epoll_create")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" size"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("epoll_ctl")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" epfd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" op"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("epoll_event")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("event"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("；\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("epoll_wait")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" epfd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("epoll_event")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" events"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" maxevents"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" timeout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("epoll_ctl() 用于向内核注册新的描述符或者是改变某个文件描述符的状态。已注册的描述符在内核中会被维护在一棵红黑树上，通过回调函数内核会将 I/O 准备好的描述符加入到一个链表中管理，进程调用 epoll_wait() 便可以得到事件完成的描述符。")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\tactive_stream"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" epoll_wait"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("epollfd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#完成的描述符")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" active_stream"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t\tread "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),t._v(" write till unavailable\n")])])]),n("p",[t._v("从上面的描述可以看出，epoll 只需要将描述符从进程缓冲区向内核缓冲区拷贝一次，并且进程"),n("mark",[t._v("不需要通过轮询")]),t._v("来获得事件完成的描述符。")]),t._v(" "),n("p",[t._v("epoll 仅适用于 Linux OS。")]),t._v(" "),n("p",[t._v("epoll 比 select 和 poll 更加灵活而且没有描述符数量限制。")]),t._v(" "),n("p",[t._v("epoll 对多线程编程更有友好，一个线程调用了 epoll_wait() 另一个线程关闭了同一个描述符也不会产生像 select 和 poll 的不确定情况。")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Create the epoll descriptor. Only one is needed per app, and is used to monitor all sockets.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The function argument is ignored (it was not before, but now it is), so put your favorite number here")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" pollingfd "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("epoll_create")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xCAFE")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" pollingfd "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// report error")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Initialize the epoll structure in case more members are added in future")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("epoll_event")]),t._v(" ev "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Associate the connection class instance with the event. You can associate anything")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// you want, epoll does not use this information. We store a connection class pointer, pConnection1")]),t._v("\nev"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ptr "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pConnection1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Monitor for input, and do not automatically rearm the descriptor after the event")]),t._v("\nev"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("events "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" EPOLLIN "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" EPOLLONESHOT"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Add the descriptor into the monitoring list. We can do it even if another thread is")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// waiting in epoll_wait - the descriptor will be properly added")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("epoll_ctl")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" epollfd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EPOLL_CTL_ADD"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" pConnection1"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getSocket")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("ev "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// report error")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Wait for up to 20 events (assuming we have added maybe 200 sockets before that it may happen)")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("epoll_event")]),t._v(" pevents"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Wait for 10 seconds, and retrieve less than 20 epoll_event and store them into epoll_event array")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" ready "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("epoll_wait")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" pollingfd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" pevents"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Check if epoll actually succeed")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" ret "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// report error and abort")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" ret "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// timeout; no event detected")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Check if any events detected")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" ret"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" pevents"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("events "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" EPOLLIN "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Get back our connection pointer")]),t._v("\n            Connection "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" c "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Connection"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" pevents"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ptr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            c"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleReadEvent")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n         "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h2",{attrs:{id:"工作模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#工作模式"}},[t._v("#")]),t._v(" 工作模式")]),t._v(" "),n("p",[t._v("epoll 的描述符事件有两种触发模式：LT（level trigger）和 ET（edge trigger）。")]),t._v(" "),n("h3",{attrs:{id:"_1-lt-模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-lt-模式"}},[t._v("#")]),t._v(" 1. LT 模式")]),t._v(" "),n("p",[t._v("当 epoll_wait() 检测到描述符事件到达时，将此事件通知进程，进程可以不立即处理该事件，下次调用 epoll_wait() 会再次通知进程。是默认的一种模式，并且同时支持 Blocking 和 No-Blocking。")]),t._v(" "),n("h3",{attrs:{id:"_2-et-模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-et-模式"}},[t._v("#")]),t._v(" 2. ET 模式")]),t._v(" "),n("p",[t._v("和 LT 模式不同的是，通知之后进程必须立即处理事件，下次再调用 epoll_wait() 时不会再得到事件到达的通知。")]),t._v(" "),n("p",[t._v("很大程度上减少了 epoll 事件被重复触发的次数，因此效率要比 LT 模式高。只支持 No-Blocking，以避免由于一个文件句柄的阻塞读/阻塞写操作把处理多个文件描述符的任务饿死。")]),t._v(" "),n("h2",{attrs:{id:"应用场景"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[t._v("#")]),t._v(" 应用场景")]),t._v(" "),n("p",[t._v("很容易产生一种错觉认为只要用 epoll 就可以了，select 和 poll 都已经过时了，其实它们都有各自的使用场景。")]),t._v(" "),n("h3",{attrs:{id:"_1-select-应用场景"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-select-应用场景"}},[t._v("#")]),t._v(" 1. select 应用场景")]),t._v(" "),n("p",[t._v("select 的 timeout 参数精度为微秒，而 poll 和 epoll 为毫秒，因此 select 更加适用于实时性要求比较高的场景，比如核反应堆的控制。")]),t._v(" "),n("p",[t._v("select 可移植性更好，几乎被所有主流平台所支持。")]),t._v(" "),n("h3",{attrs:{id:"_2-poll-应用场景"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-poll-应用场景"}},[t._v("#")]),t._v(" 2. poll 应用场景")]),t._v(" "),n("p",[t._v("poll 没有最大描述符数量的限制，如果平台支持并且对实时性要求不高，应该使用 poll 而不是 select。")]),t._v(" "),n("h3",{attrs:{id:"_3-epoll-应用场景"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-epoll-应用场景"}},[t._v("#")]),t._v(" 3. epoll 应用场景")]),t._v(" "),n("p",[t._v("只需要运行在 Linux 平台上，有大量的描述符需要同时轮询，并且这些连接最好是长连接。")]),t._v(" "),n("p",[t._v("需要同时监控小于 1000 个描述符，就没有必要使用 epoll，因为这个应用场景下并不能体现 epoll 的优势。")]),t._v(" "),n("p",[t._v("需要监控的描述符状态变化多，而且都是非常短暂的，也没有必要使用 epoll。因为 epoll 中的所有描述符都存储在内核中，造成每次需要对描述符的状态改变都需要通过 epoll_ctl() 进行系统调用，频繁系统调用降低效率。并且 epoll 的描述符存储在内核，不容易调试。")]),t._v(" "),n("h1",{attrs:{id:"参考资料"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),n("ul",[n("li",[t._v("Stevens W R, Fenner B, Rudoff A M. UNIX network programming[M]. Addison-Wesley Professional, 2004.")]),t._v(" "),n("li",[t._v("http://man7.org/linux/man-pages/man2/select.2.html")]),t._v(" "),n("li",[t._v("http://man7.org/linux/man-pages/man2/poll.2.html")]),t._v(" "),n("li",[n("a",{attrs:{href:"https://www.ibm.com/developerworks/linux/library/l-async/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Boost application performance using asynchronous I/O"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://msdn.microsoft.com/en-us/library/windows/desktop/aa365683(v=vs.85).aspx",target:"_blank",rel:"noopener noreferrer"}},[t._v("Synchronous and Asynchronous I/O"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://segmentfault.com/a/1190000003063859",target:"_blank",rel:"noopener noreferrer"}},[t._v("Linux IO 模式及 select、poll、epoll 详解"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://daniel.haxx.se/docs/poll-vs-select.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("poll vs select vs event-based"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"http://www.ulduzsoft.com/2014/01/select-poll-epoll-practical-difference-for-system-architects/",target:"_blank",rel:"noopener noreferrer"}},[t._v("select / poll / epoll: practical difference for system architects"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://code.woboq.org/userspace/glibc/sysdeps/unix/sysv/linux/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Browse the source code of userspace/glibc/sysdeps/unix/sysv/linux/ online"),n("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=e.exports},982:function(t,s,a){t.exports=a.p+"assets/img/1492928416812_4.cada9038.png"},983:function(t,s,a){t.exports=a.p+"assets/img/1492929000361_5.6ed5242e.png"},984:function(t,s){t.exports="data:image/png;base64,"},985:function(t,s,a){t.exports=a.p+"assets/img/1492929553651_7.80f8b28f.png"},986:function(t,s){t.exports="data:image/png;base64,"},987:function(t,s){t.exports="data:image/png;base64,"}}]);