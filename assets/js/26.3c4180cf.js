(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{1e3:function(t,s){t.exports="data:image/jpeg;base64,"},1001:function(t,s,a){t.exports=a.p+"assets/img/a3253deb-8d21-40a1-aae4-7d178e4aa319.b57e32c7.jpg"},1002:function(t,s,a){t.exports=a.p+"assets/img/51e2ed95-65b8-4ae9-8af3-65602d452a25.cc8e319f.jpg"},1003:function(t,s){t.exports="data:image/png;base64,"},1004:function(t,s,a){t.exports=a.p+"assets/img/f61b5419-c94a-4df1-8d4d-aed9ae8cc6d5.d386ee48.png"},1256:function(t,s,a){"use strict";a.r(s);var v=a(7),i=Object(v.a)({},(function(){var t=this,s=t.$createElement,v=t._self._c||s;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("p",[t._v("网络层只把分组发送到目的主机，但是真正通信的并不是主机而是主机中的进程。传输层提供了"),v("mark",[t._v("进程间的逻辑通信")]),t._v("，"),v("mark",[t._v("传输层")]),t._v("向高层用户屏蔽了下面网络层的核心细节，使应用程序看起来像是在两个传输层实体之间有一条端到端的逻辑通信信道。")]),t._v(" "),v("h1",{attrs:{id:"基本概念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[t._v("#")]),t._v(" 基本概念")]),t._v(" "),v("p",[v("strong",[t._v("套接字")]),t._v("：由"),v("mark",[t._v("IP地址及端口")]),t._v("构成的一种进程间通信机制。可以看作不同主机之间的进程进行双向通信的端点。")]),t._v(" "),v("h2",{attrs:{id:"数据可靠传输原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据可靠传输原理"}},[t._v("#")]),t._v(" 数据可靠传输原理")]),t._v(" "),v("ol",[v("li",[v("p",[v("strong",[t._v("下层信道完全可靠")]),t._v("：只需发送与接收机制")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("信道有比特差错")]),t._v("：引入差错检测、控制信号（ACK和NAK）和"),v("strong",[t._v("自动请求重传")]),t._v("机制。")])])]),t._v(" "),v("blockquote",[v("p",[t._v("接收方收到错误的分组时，直接丢弃，等待发送方重传。")])]),t._v(" "),v("ol",{attrs:{start:"3"}},[v("li",[v("strong",[t._v("控制信号（ACK和NAK）比特差错")]),t._v("：对控制信号引入0/1序号。")])]),t._v(" "),v("blockquote",[v("p",[t._v("发送方认定ACK/NAK出错时，重传分组，接收方需辨别该分组是新的还是重传的。")])]),t._v(" "),v("ol",{attrs:{start:"4"}},[v("li",[v("strong",[t._v("替代NAK")]),t._v(": 用重复的ACK替代NAK。")])]),t._v(" "),v("blockquote",[v("p",[t._v("如果接收方校验和检测出错，则发送"),v("strong",[t._v("上一次序号")]),t._v("的ACK。")])]),t._v(" "),v("ol",{attrs:{start:"5"}},[v("li",[v("strong",[t._v("丢包信道")]),t._v("：引入"),v("strong",[t._v("超时重传")]),t._v("。")])]),t._v(" "),v("h2",{attrs:{id:"流量控制方式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#流量控制方式"}},[t._v("#")]),t._v(" 流量控制方式")]),t._v(" "),v("h3",{attrs:{id:"_1-停等机制-stop-and-wait"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-停等机制-stop-and-wait"}},[t._v("#")]),t._v(" 1. 停等机制（Stop-and-wait）")]),t._v(" "),v("p",[t._v("在得到已发送帧的ACK之后，才能发送下一帧。效率很低")]),t._v(" "),v("h3",{attrs:{id:"_2-流水线机制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-流水线机制"}},[t._v("#")]),t._v(" 2.  流水线机制")]),t._v(" "),v("p",[t._v("滑动窗口机制")]),t._v(" "),v("p",[v("strong",[t._v("回退N步")])]),t._v(" "),v("ul",[v("li",[t._v("发送方维护N个大小的滑动窗口，可以连续发送N个分组。在接受到ACK后，窗口向前滑动。")]),t._v(" "),v("li",[t._v("接收方窗口大小为1，只能按顺序接受分组，丢弃乱序分组。")]),t._v(" "),v("li",[t._v("当一个分组要重传时，需重传N个在窗口的分组。")])]),t._v(" "),v("p",[v("img",{attrs:{src:a(996),alt:"avatar"}}),v("br")]),t._v(" "),v("p",[v("strong",[t._v("选择重传")]),t._v("\n在回退N步的基础上，增大接收窗口的大小，一般为N。")]),t._v(" "),v("ul",[v("li",[t._v("发送方仅发送未ACK的分组。")]),t._v(" "),v("li",[t._v("接收方缓存乱序分组，在接收有序分组后窗口向前滑动。")])]),t._v(" "),v("p",[t._v("为了不混淆分组，滑动窗口的大小"),v("span",{staticClass:"katex"},[v("span",{staticClass:"katex-mathml"},[v("math",[v("semantics",[v("mrow",[v("mi",[t._v("N")]),v("mo",[t._v("≤")]),v("msup",[v("mn",[t._v("2")]),v("mrow",[v("mi",[t._v("k")]),v("mo",[t._v("−")]),v("mn",[t._v("1")])],1)],1)],1),v("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("N \\leq 2^{k-1}")])],1)],1)],1),v("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[v("span",{staticClass:"strut",staticStyle:{height:"0.849108em"}}),v("span",{staticClass:"strut bottom",staticStyle:{height:"0.985078em","vertical-align":"-0.13597em"}}),v("span",{staticClass:"base textstyle uncramped"},[v("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.10903em"}},[t._v("N")]),v("span",{staticClass:"mrel"},[t._v("≤")]),v("span",{staticClass:"mord"},[v("span",{staticClass:"mord mathrm"},[t._v("2")]),v("span",{staticClass:"vlist"},[v("span",{staticStyle:{top:"-0.363em","margin-right":"0.05em"}},[v("span",{staticClass:"fontsize-ensurer reset-size5 size5"},[v("span",{staticStyle:{"font-size":"0em"}},[t._v("​")])]),v("span",{staticClass:"reset-textstyle scriptstyle uncramped"},[v("span",{staticClass:"mord scriptstyle uncramped"},[v("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.03148em"}},[t._v("k")]),v("span",{staticClass:"mbin"},[t._v("−")]),v("span",{staticClass:"mord mathrm"},[t._v("1")])])])]),v("span",{staticClass:"baseline-fix"},[v("span",{staticClass:"fontsize-ensurer reset-size5 size5"},[v("span",{staticStyle:{"font-size":"0em"}},[t._v("​")])]),t._v("​")])])])])])]),t._v("，k为窗口帧编号的比特数。")]),t._v(" "),v("h1",{attrs:{id:"udp-和-tcp-的特点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#udp-和-tcp-的特点"}},[t._v("#")]),t._v(" UDP 和 TCP 的特点")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("用户数据报协议 UDP（User Datagram Protocol）是无连接的，尽最大可能交付，没有拥塞控制，面向报文（对于应用程序传下来的报文不合并也不拆分，只是添加 UDP 首部），支持一对一、一对多、多对一和多对多的交互通信。")])]),t._v(" "),v("li",[v("p",[t._v("传输控制协议 TCP（Transmission Control Protocol）是面向连接的，提供可靠交付，有流量控制，拥塞控制，提供全双工通信，面向字节流（把应用层传下来的报文看成字节流，把字节流组织成大小不等的数据块），每一条 TCP 连接只能是点对点的（一对一）。")])])]),t._v(" "),v("h1",{attrs:{id:"udp-首部格式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#udp-首部格式"}},[t._v("#")]),t._v(" UDP 首部格式")]),t._v(" "),v("p",[v("img",{attrs:{src:a(997),alt:"avatar | 600"}}),v("br")]),t._v(" "),v("p",[t._v("首部字段只有 8 个字节，包括源端口、目的端口、长度、检验和。12 字节的伪首部是为了计算检验和临时添加的。")]),t._v(" "),v("h1",{attrs:{id:"tcp-首部格式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp-首部格式"}},[t._v("#")]),t._v(" TCP 首部格式")]),t._v(" "),v("p",[v("img",{attrs:{src:a(998),alt:"avatar | 700"}}),v("br")]),t._v(" "),v("ul",[v("li",[v("p",[v("strong",[t._v("序号")]),t._v("   ：用于对字节流进行编号，例如序号为 301，表示第一个字节的编号为 301，如果携带的数据长度为 100 字节，那么下一个报文段的序号应为 401。")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("确认号")]),t._v("   ：期望收到的下一个报文段的序号。例如 B 正确收到 A 发送来的一个报文段，序号为 501，携带的数据长度为 200 字节，因此 B 期望下一个报文段的序号为 701，B 发送给 A 的确认报文段中确认号就为 701。")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("数据偏移")]),t._v("   ：指的是数据部分距离报文段起始处的偏移量，实际上指的是首部的长度。")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("确认 ACK")]),t._v("   ：当 ACK=1 时确认号字段有效，否则无效。TCP 规定，在连接建立后所有传送的报文段都必须把 ACK 置 1。")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("同步 SYN")]),t._v("   ：在连接建立时用来同步序号。当 SYN=1，ACK=0 时表示这是一个连接请求报文段。若对方同意建立连接，则响应报文中 SYN=1，ACK=1。")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("终止 FIN")]),t._v("   ：用来释放一个连接，当 FIN=1 时，表示此报文段的发送方的数据已发送完毕，并要求释放连接。")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("窗口")]),t._v("   ：窗口值作为接收方让发送方设置其发送窗口的依据。之所以要有这个限制，是因为接收方的数据缓存空间是有限的。")])])]),t._v(" "),v("h1",{attrs:{id:"tcp连接管理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp连接管理"}},[t._v("#")]),t._v(" TCP连接管理")]),t._v(" "),v("h2",{attrs:{id:"tcp-的三次握手"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp-的三次握手"}},[t._v("#")]),t._v(" TCP 的三次握手")]),t._v(" "),v("p",[v("img",{attrs:{src:a(999),alt:"avatar | 600"}}),v("br")]),t._v(" "),v("p",[v("strong",[t._v("SYN：请求同步的标识")])]),t._v(" "),v("p",[t._v("假设 A 为客户端，B 为服务器端。")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("首先 B 处于 LISTEN（监听）状态，等待客户的连接请求。")])]),t._v(" "),v("li",[v("p",[t._v("A 向 B 发送"),v("mark",[t._v("连接请求")]),t._v("报文，SYN=1，ACK=0，选择一个初始的序号 x。")])]),t._v(" "),v("li",[v("p",[t._v("B 收到连接请求报文，如果同意建立连接，则向 A 发送连接确认报文，SYN=1，ACK=1，确认号为 x+1，同时也选择一个初始的序号 y。")])]),t._v(" "),v("li",[v("p",[t._v("A 收到 B 的"),v("mark",[t._v("连接确认")]),t._v("报文后，还要向 B 发出确认，确认号为 y+1，序号为 x+1。")])]),t._v(" "),v("li",[v("p",[t._v("B 收到 A 的确认后，连接建立。")])])]),t._v(" "),v("p",[v("strong",[t._v("三次握手的原因")]),v("br"),t._v("\n确保双方都能明确自己和对方的收、发能力是正常的。")]),t._v(" "),v("p",[v("mark",[t._v("来回两次连接可以确定发送方到接收方的通信是否正常")]),t._v("。为了确定任意一方到另一方的通信是否正常，需要2次来回连接，即4次。将中间两次合并为1次，便构成了三次握手。")]),t._v(" "),v("h2",{attrs:{id:"tcp-的四次挥手"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp-的四次挥手"}},[t._v("#")]),t._v(" TCP 的四次挥手")]),t._v(" "),v("p",[v("img",{attrs:{src:a(1e3),alt:"avatar | 600"}}),v("br")]),t._v(" "),v("p",[t._v("以下描述不讨论序号和确认号，因为序号和确认号的规则比较简单。并且不讨论 ACK，因为 ACK 在连接建立之后都为 1。")]),t._v(" "),v("p",[v("strong",[t._v("FIN：不在发送消息的标识")])]),t._v(" "),v("ul",[v("li",[v("p",[t._v("A 发送连接释放报文，FIN=1。A关闭发送连接。")])]),t._v(" "),v("li",[v("p",[t._v("B 收到之后发出确认。")])]),t._v(" "),v("li",[v("p",[t._v("当B发送完数据后，发送连接释放报文，FIN=1。")])]),t._v(" "),v("li",[v("p",[t._v("A 收到后发出确认。进入 TIME-WAIT 状态，等待 2 MSL（最大报文存活时间）后释放连接。")])]),t._v(" "),v("li",[v("p",[t._v("B 收到 A 的确认后释放连接。")])])]),t._v(" "),v("p",[v("strong",[t._v("四次挥手的原因")]),v("br"),t._v("\nTCP为全双工通信，每一端都可以独立关闭连接。")]),t._v(" "),v("p",[t._v("客户端发送了 FIN 连接释放报文之后，服务器收到了这个报文，就进入了 CLOSE-WAIT 状态。这个状态是"),v("mark",[t._v("为了让服务器端发送还未传送完毕的数据")]),t._v("，传送完毕之后，服务器会发送 FIN 连接释放报文。")]),t._v(" "),v("p",[v("strong",[t._v("TIME_WAIT")])]),t._v(" "),v("p",[t._v("客户端接收到服务器端的 FIN 报文后进入此状态，此时并不是直接进入 CLOSED 状态，还需要等待一个时间计时器设置的时间 2MSL。这么做有两个理由：")]),t._v(" "),v("ul",[v("li",[v("p",[v("mark",[t._v("确保最后一个确认报文能够到达，服务器关闭")]),t._v("。如果 B 没收到 A 发送来的确认报文，那么就会重新发送连接释放请求报文，A 等待一段时间就是为了处理这种情况的发生。")])]),t._v(" "),v("li",[v("p",[t._v("等待一段时间是为了让本连接持续时间内所产生的所有报文都从网络中消失，使得下一个新的连接不会出现旧的连接请求报文。")])])]),t._v(" "),v("h2",{attrs:{id:"keep-alive"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#keep-alive"}},[t._v("#")]),t._v(" keep-alive")]),t._v(" "),v("p",[t._v("TCP连接信道是全双工的，这意味着每一端都可以主动发送信息。对于明确信息传输量及传输时间的，一般采用"),v("strong",[t._v("短链接")]),t._v("，即其中一端发完信息后就直接关闭连接。对于不确定的，如即时通讯，采用加上keep-alive的TCP连接，称为"),v("strong",[t._v("长连接")]),t._v("。在这种模式下，连接的关闭由嗅探机制来保证。")]),t._v(" "),v("h1",{attrs:{id:"tcp-可靠传输"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp-可靠传输"}},[t._v("#")]),t._v(" TCP 可靠传输")]),t._v(" "),v("p",[t._v("TCP 使用"),v("mark",[t._v("超时重传")]),t._v("来实现可靠传输：如果一个已经发送的报文段在超时时间内没有收到确认，那么就重传这个报文段。")]),t._v(" "),v("p",[t._v("一个报文段从发送再到接收到确认所经过的时间称为往返时间 RTT，加权平均往返时间 RTTs 计算如下：")]),t._v(" "),v("p",[v("span",{staticClass:"katex-display"},[v("span",{staticClass:"katex"},[v("span",{staticClass:"katex-mathml"},[v("math",[v("semantics",[v("mrow",[v("mi",[t._v("R")]),v("mi",[t._v("T")]),v("mi",[t._v("T")]),v("mi",[t._v("s")]),v("mo",[t._v("=")]),v("mo",[t._v("(")]),v("mn",[t._v("1")]),v("mo",[t._v("−")]),v("mi",[t._v("a")]),v("mo",[t._v(")")]),v("mo",[t._v("∗")]),v("mo",[t._v("(")]),v("mi",[t._v("R")]),v("mi",[t._v("T")]),v("mi",[t._v("T")]),v("mi",[t._v("s")]),v("mo",[t._v(")")]),v("mo",[t._v("+")]),v("mi",[t._v("a")]),v("mo",[t._v("∗")]),v("mi",[t._v("R")]),v("mi",[t._v("T")]),v("mi",[t._v("T")])],1),v("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("RTTs=(1-a)*(RTTs)+a*RTT\n")])],1)],1)],1),v("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[v("span",{staticClass:"strut",staticStyle:{height:"0.75em"}}),v("span",{staticClass:"strut bottom",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),v("span",{staticClass:"base displaystyle textstyle uncramped"},[v("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.00773em"}},[t._v("R")]),v("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.13889em"}},[t._v("T")]),v("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.13889em"}},[t._v("T")]),v("span",{staticClass:"mord mathit"},[t._v("s")]),v("span",{staticClass:"mrel"},[t._v("=")]),v("span",{staticClass:"mopen"},[t._v("(")]),v("span",{staticClass:"mord mathrm"},[t._v("1")]),v("span",{staticClass:"mbin"},[t._v("−")]),v("span",{staticClass:"mord mathit"},[t._v("a")]),v("span",{staticClass:"mclose"},[t._v(")")]),v("span",{staticClass:"mbin"},[t._v("∗")]),v("span",{staticClass:"mopen"},[t._v("(")]),v("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.00773em"}},[t._v("R")]),v("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.13889em"}},[t._v("T")]),v("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.13889em"}},[t._v("T")]),v("span",{staticClass:"mord mathit"},[t._v("s")]),v("span",{staticClass:"mclose"},[t._v(")")]),v("span",{staticClass:"mbin"},[t._v("+")]),v("span",{staticClass:"mord mathit"},[t._v("a")]),v("span",{staticClass:"mbin"},[t._v("∗")]),v("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.00773em"}},[t._v("R")]),v("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.13889em"}},[t._v("T")]),v("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.13889em"}},[t._v("T")])])])])])]),t._v(" "),v("p",[t._v("其中，0 ≤ a ＜ 1，RTTs 随着 a 的增加更容易受到 RTT 的影响。")]),t._v(" "),v("p",[t._v("超时时间 RTO 应该略大于 RTTs，TCP 使用的超时时间计算如下：")]),t._v(" "),v("p",[v("span",{staticClass:"katex-display"},[v("span",{staticClass:"katex"},[v("span",{staticClass:"katex-mathml"},[v("math",[v("semantics",[v("mrow",[v("mi",[t._v("R")]),v("mi",[t._v("T")]),v("mi",[t._v("O")]),v("mo",[t._v("=")]),v("mi",[t._v("R")]),v("mi",[t._v("T")]),v("mi",[t._v("T")]),v("mi",[t._v("s")]),v("mo",[t._v("+")]),v("mn",[t._v("4")]),v("mo",[t._v("∗")]),v("mi",[t._v("R")]),v("mi",[t._v("T")]),v("msub",[v("mi",[t._v("T")]),v("mi",[t._v("d")])],1)],1),v("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("RTO=RTTs+4*RTT_d\n")])],1)],1)],1),v("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[v("span",{staticClass:"strut",staticStyle:{height:"0.68333em"}}),v("span",{staticClass:"strut bottom",staticStyle:{height:"0.83333em","vertical-align":"-0.15em"}}),v("span",{staticClass:"base displaystyle textstyle uncramped"},[v("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.00773em"}},[t._v("R")]),v("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.13889em"}},[t._v("T")]),v("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.02778em"}},[t._v("O")]),v("span",{staticClass:"mrel"},[t._v("=")]),v("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.00773em"}},[t._v("R")]),v("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.13889em"}},[t._v("T")]),v("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.13889em"}},[t._v("T")]),v("span",{staticClass:"mord mathit"},[t._v("s")]),v("span",{staticClass:"mbin"},[t._v("+")]),v("span",{staticClass:"mord mathrm"},[t._v("4")]),v("span",{staticClass:"mbin"},[t._v("∗")]),v("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.00773em"}},[t._v("R")]),v("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.13889em"}},[t._v("T")]),v("span",{staticClass:"mord"},[v("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.13889em"}},[t._v("T")]),v("span",{staticClass:"vlist"},[v("span",{staticStyle:{top:"0.15em","margin-right":"0.05em","margin-left":"-0.13889em"}},[v("span",{staticClass:"fontsize-ensurer reset-size5 size5"},[v("span",{staticStyle:{"font-size":"0em"}},[t._v("​")])]),v("span",{staticClass:"reset-textstyle scriptstyle cramped"},[v("span",{staticClass:"mord mathit"},[t._v("d")])])]),v("span",{staticClass:"baseline-fix"},[v("span",{staticClass:"fontsize-ensurer reset-size5 size5"},[v("span",{staticStyle:{"font-size":"0em"}},[t._v("​")])]),t._v("​")])])])])])])])]),t._v(" "),v("p",[t._v("其中 RTT"),v("sub",[t._v("d")]),t._v(" 为偏差的加权平均值。")]),t._v(" "),v("h1",{attrs:{id:"tcp-滑动窗口"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp-滑动窗口"}},[t._v("#")]),t._v(" TCP 滑动窗口")]),t._v(" "),v("p",[t._v("窗口是缓存的一部分，用来暂时存放字节流。发送方和接收方各有一个窗口，接收方通过 TCP 报文段中的窗口字段告诉发送方自己的窗口大小，发送方根据这个值和其它信息设置自己的窗口大小。")]),t._v(" "),v("p",[t._v("发送窗口内的字节都允许被发送，接收窗口内的字节都允许被接收。如果发送窗口左部的字节已经发送并且收到了确认，那么就将发送窗口向右滑动一定距离，直到左部第一个字节不是已发送并且已确认的状态；接收窗口的滑动类似，接收窗口左部字节已经发送确认并交付主机，就向右滑动接收窗口。")]),t._v(" "),v("p",[t._v("接收窗口只会对窗口内最后一个按序到达的字节进行确认，例如接收窗口已经收到的字节为 {31, 34, 35}，其中 {31} 按序到达，而 {34, 35} 就不是，因此只对字节 31 进行确认。发送方得到一个字节的确认之后，就知道这个字节之前的所有字节都已经被接收。")]),t._v(" "),v("p",[v("img",{attrs:{src:a(1001),alt:"avatar | 800"}}),v("br")]),t._v(" "),v("h1",{attrs:{id:"tcp-流量控制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp-流量控制"}},[t._v("#")]),t._v(" TCP 流量控制")]),t._v(" "),v("p",[t._v("流量控制是为了"),v("mark",[t._v("控制发送方发送速率")]),t._v("，保证接收方来得及接收。")]),t._v(" "),v("p",[t._v("接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将窗口字段设置为 0，则发送方不能发送数据。")]),t._v(" "),v("h1",{attrs:{id:"tcp-拥塞控制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp-拥塞控制"}},[t._v("#")]),t._v(" TCP 拥塞控制")]),t._v(" "),v("p",[t._v("如果网络出现拥塞，分组将会丢失，此时发送方会继续重传，从而导致网络拥塞程度更高。因此当出现拥塞时，应当控制发送方的速率。这一点和流量控制很像，但是出发点不同。流量控制是为了让接收方能来得及接收，而拥塞控制是为了"),v("mark",[t._v("降低整个网络的拥塞程度")]),t._v("。")]),t._v(" "),v("p",[v("img",{attrs:{src:a(1002),alt:"avatar | 500"}}),v("br")]),t._v(" "),v("p",[t._v("TCP 主要通过四个算法来进行拥塞控制：慢开始、拥塞避免、快重传、快恢复。")]),t._v(" "),v("p",[t._v("发送方需要维护一个叫做拥塞窗口（cwnd）的状态变量，注意拥塞窗口与发送方窗口的区别：拥塞窗口只是一个状态变量，实际决定发送方能发送多少数据的是发送方窗口。")]),t._v(" "),v("p",[t._v("为了便于讨论，做如下假设：")]),t._v(" "),v("ul",[v("li",[t._v("接收方有足够大的接收缓存，因此不会发生流量控制；")]),t._v(" "),v("li",[t._v("虽然 TCP 的窗口基于字节，但是这里设窗口的大小单位为报文段。")])]),t._v(" "),v("p",[v("img",{attrs:{src:a(1003),alt:"avatar | 800"}}),v("br")]),t._v(" "),v("h2",{attrs:{id:"_1-慢开始与拥塞避免"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-慢开始与拥塞避免"}},[t._v("#")]),t._v(" 1. 慢开始与拥塞避免")]),t._v(" "),v("p",[t._v("发送的最初执行慢开始，令 cwnd = 1，发送方只能发送 1 个报文段；当收到确认后，将 cwnd 加倍，因此之后发送方能够发送的报文段数量为：2、4、8 ...")]),t._v(" "),v("p",[t._v("注意到慢开始每个轮次都将 cwnd 加倍，这样会让 cwnd 增长速度非常快，从而使得发送方发送的速度增长速度过快，网络拥塞的可能性也就更高。设置一个慢开始门限 ssthresh，当 cwnd >= ssthresh 时，进入拥塞避免，每个轮次只将 cwnd 加 1。")]),t._v(" "),v("p",[t._v("如果出现了超时，则令 ssthresh = cwnd / 2，然后重新执行慢开始。")]),t._v(" "),v("h2",{attrs:{id:"_2-快重传与快恢复"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-快重传与快恢复"}},[t._v("#")]),t._v(" 2. 快重传与快恢复")]),t._v(" "),v("p",[t._v("在接收方，要求每次接收到报文段都应该对最后一个已收到的有序报文段进行确认。例如已经接收到 M"),v("sub",[t._v("1")]),t._v(" 和 M"),v("sub",[t._v("2")]),t._v("，此时收到 M"),v("sub",[t._v("4")]),t._v("，应当发送对 M"),v("sub",[t._v("2")]),t._v(" 的确认。")]),t._v(" "),v("p",[t._v("在发送方，如果收到三个重复确认，那么可以知道下一个报文段丢失，此时执行快重传，立即重传下一个报文段。例如收到三个 M"),v("sub",[t._v("2")]),t._v("，则 M"),v("sub",[t._v("3")]),t._v(" 丢失，立即重传 M"),v("sub",[t._v("3")]),t._v("。")]),t._v(" "),v("p",[t._v("在这种情况下，只是丢失个别报文段，而不是网络拥塞。因此执行快恢复，令 ssthresh = cwnd / 2 ，cwnd = ssthresh，注意到此时直接进入拥塞避免。")]),t._v(" "),v("p",[t._v("慢开始和快恢复的快慢指的是 cwnd 的设定值，而不是 cwnd 的增长速率。慢开始 cwnd 设定为 1，而快恢复 cwnd 设定为 ssthresh。")]),t._v(" "),v("p",[v("img",{attrs:{src:a(1004),alt:"avatar | 600"}}),v("br")])])}),[],!1,null,null,null);s.default=i.exports},996:function(t,s,a){t.exports=a.p+"assets/img/Network_GBN-action.172d0530.png"},997:function(t,s){t.exports="data:image/jpeg;base64,"},998:function(t,s,a){t.exports=a.p+"assets/img/55dc4e84-573d-4c13-a765-52ed1dd251f9.fe9d48e9.png"},999:function(t,s,a){t.exports=a.p+"assets/img/e92d0ebc-7d46-413b-aec1-34a39602f787.c4ffddc0.png"}}]);